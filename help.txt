.TH ODEXP 1
.SH NAME
odexp \- fast ODE solver with gnuplot graphical output
.SH DESCRIPTION
.B odexp 
command line tool for ODE simulation.
.SH COMMANDS 
.TP
.BR + ", " = ", " C^g 
Increment current parameter by a multiplicative factor \fBpar_step\fR 
.TP 
.BR - ", " C^h
Decrement current parameter by a multiplicative factor \fBpar_step\fR
.TP
.BR ] ", " C^]    
Plot next variable on the y-axis (cyclic)
.TP
.BR [ ", " C^[ 
Plot previous variable on the y-axis (cyclic)
.TP
.BR >
Double the number of time steps 
.TP
.BR <
Halve the number of time steps 
.TP
.BR ! " " \fIfilename\fR   
Try to save the current plot to \fIfilename\fR. EPS format
.TP
.BR 0 ", " n 
Switch to/update normal plot 
.TP
.BR 9 ", " b
Switch to continuation plot
.TP
.BR 8 ", " j
Switch to range plot
.TP
.BR A 
Reset all axes to linear scale 
.TP
.BR a\fIu\fR\fIs\fR ", " a\fIs\fR\fIu\fR
Set axis \fIu\fR={x|y} to scale \fIs\fR={l|n}, n for linear (normal) scale and l for log scale 
.TP
.BR ci " " \fI{\fIind\fR|\fIvar\fR} " " \fIval\fR   
Set value of initial condition of variable with index  \fIi\fR or name \fIvar\fR to \fIval\fR
.TP
.BR cI " " \fIind\fR         
Revert variable \fIind\fR to expression
.TP
.BR cl            
Change to last initial conditions, same as \fBil\fR
.TP
.BR co " " \fR{\fIind\fR|\fIvar\fR} " " \fIval\fR   
Set value of option with index \fIind\fR or name \fIvar\fR to \fIval\fR
.TP
.BR ct " " \fIti\fR " " \fIval\fR   
Set value of \fIti\fR to v (\fIti\fR = 0 or 1) 
.TP
.BR d              
Reload the parameter file 
.TP
.BR E
Decrease the time span by a factor 2
.TP
.BR e
Increase the time span by a factor 2
.TP
.BR f              
Toggle plot freeze (on/off) 
.TP
.BR g " " \fIcmd\fR        
Send the command \fIcmd\fR to gnuplot 
.TP
.BR h              
Display this help
.TP
.BR I              
Set initial conditions to previous 
.TP
.BR il            
Use the state of the system at t1 as initial conditions 
.TP 
.BR in            
Loop through initial conditions. 
Set to I to revert to expression, enter to keep current initial condition
.TP
.BR is            
Set initial condition to steady state. 
Steady state must have been computed with \fBms\fR
.TP
.BR l@            
List all user-defined functions 
.TP
.BR la            
List all auxiliary variables (can be plotted)
.TP 
.BR lc            
List all constant arrays
.TP
.BR le            
List all parametric expressions
.TP 
.BR lf            
List all array files (nrows ncols filename)
.TP
.BR li            
List all variables with initial conditions 
.TP
.BR ll          
List file name and various information 
.TP
.BR ln            
Display system size
.TP
.BR lo " " [\fIoptiontype\fR]         
List options that match \fIoptiontype\fR, or all options if \fIoptiontype\fR is missing
.TP
.BR lp            
List all parameters 
.TP
.BR ls            
List steady states
.TP 
.BR lx            
List all equations and auxiliary variables 
.TP
.BR mm            
Try to find all steady states 
.TP
.BR mr 
Range over parameters. The active parameter takes values between r/par0 and r/par1 with 
multiplicative step r/mstep and additive stesp r/astep. For each value, the system is
integrated over tspan and the min and the max of each variable is stored in the file range.tab. 
If r/ric is 0, the initial conditions are set to the last state of the previous integration, 
otherwise, the initial conditions are set as usual
.TP
.BR ms            
Find a steady state with starting guess given by initial conditions 
.TP
.BR o " " \fIfilename\fR  
Load parameters values and options from file \fIfilename\fR 
.TP
.BR P " " \fIval\fR        
Set current parameter to \fIval\fR
.TP
.BR p " " \fR{\fIind\fR|\fIpar\fR} " " \fR[\fIval\fR]     
Make parameter with index \fIind\fr or name \fipar\fr the current parameter, and set its value to \fIval\fR 
When val is missing, the parameter value is unchanged
.TP
.BR Q              
Quit without snapshot 
.TP
.BR q " " \fR[\fImsg\fR]        
Quit and snap with optional message \fImsg\fR 
.TP
.BR R
Rerun the ODE system and update plot
.TP
.BR r
Repeat the last gnuplot command (replot)
.TP
.BR s " " \fR[\fImsg\fR]        
Snapshot of current simulation and parameter values with optional \fImsg\fR 
.TP
.BR t " " \fR[\fIt0\fR] " " \fIt1\fR
Set time span from \fIt0\fR to \fIt1\fR. 
By default t0 is not changed. 
Final time \fIt1\fR must be larger than \fIt0\fR.
.TP
.BR u              
Toggle add curves to plot (on/off) 
.TP
.BR v ", " 2 ", " 3 " " \fR{\fIi\fR|\fIx\fR} " " \fR{\fIj\fR|\fIy\fR} " " \fR[{\fIk\fR|\fIz\fR}]      
Set 2D/3D view, x-axis to index \fIi\fR (variable \fIx\fR), y-axis to \fIj\fR (variable \fIy\fR), 
and z-axis to \fIk\fR (variable \fIz\fR). 
Set variable to T or index -1 for time.
\fB2\fR takes only the first two arguments, and the \fB3\fR takes the three arguments
.TP
.BR x " " \fR{\fIind\fR| \fIvar\fR}
Plot variable with index \fIind\fR or name \fIvar\fR on the x-axis
.TP
.BR y " " \fR{\fIind\fR|\fIvar\fR}
Plot variable with index \fIind\fR or name \fIvar\fR on the y-axis

.SH ODEXP DECLARATIONS
.TP
.BR P 
Parameters. 
Must be numerical (double). 
Parameters appear in the list of parameters. 
They can be modified from within odexp and can be ranged over. 
Parameters are declared in name value pairs, separated with semicolumns (;), or one parameter per line.

.nf
P a 0.1; b 0.2

P a 0.1
P b 0.1
.fi

.TP
.BR E
Expressions. Expressions are function of the parameters. They cannot be modified. 
Expression are declared as Name Expression pairs.

.nf
E c a*a
.fi

.TP
.BR A 
Auxiliary variables. Auxiliary variables depend on parameters, expressions and dynamical variables. 
They are declared as Name Expression pairs, and must be scalars or one-dimensional arrays.
Auxiliary variables are useful to monitor quantities that depend on the dynamical variables. They can be 
plotted, and their values are recorded in the output file current.tab. 

.nf
A d sqrt(x+c)

A a[i=0:5] X[i]*X[i]
A norm_x sqrt(sum(a,5))
A norm_x2 dotprod(X,X,5)
.fi

.TP
.BR D
Dynamical variables. Dynamical variables are the dependent variables of the ODE system.
Dynamical variable x is declared as dx/dt followed by = and the RHS of the equation

.nf
dx/dt = -a*x
.fi

.TP
.BR I
Initial conditions. 
Initial conditions can be numerical, or can be expression that depend on parameters, expressions and auxiliary variables.
If initial conditions are expressions, their values can be overruled or reset in odexp.

.nf
I x 1.0

I x b
.fi

.TP
.BR O
Options. Options can be preset. See below for a list of options.

.nf
O plot_x x
O reltol 1e-3
.fi

.TP
.BR T
Timespan. Time span is an array of the form t0 ti ... t1 where t0 and t1 are the initial and final times. 
Intermediate values ti are stopping time, where the system is reset to initial condition. This is useful when systems
are discontinuous, and variable need to be reset at known timepoints.

.TP 
.BR U
Uniform random array. To generate an array of length 5 of pseudo-random numbers uniformly distbuted between -1 and 1 

.nf
U r[i=0:5] 
E rand_array[i=0:5] -1 + 2*r[i]
.fi

.TP
.BR S
Static variable. Must be numerical. Static variables cannot be modified.

.nf
S MY_PI 3.14
.fi

.TP
.BR C
Constant array. Must be numerical array. Constant arrays cannot be modified.
Constant arrays can be of any dimensions. Useful for arrays of small sizes. 

.nf
C MY_ARRAY[2][3] { {1.1, 1.2, 1.3}, {2.1, 2.2, 2.3} }
.fi

.TP
.BR F
Constant array from file. The declaration has the following syntax 

.nf
F MY_ARRAY NROWS NCOLS FILENAME                      
.fi

where NROWS and NCOLS are the number of rows and columns in the file FILENAME.
FILENAME is a text file containing space delimited array of floats.

.TP
.BR @
User-defined function.

.nf
@ my_fun_name (x, y, z) = x*x+y+z 
is interpreted as
/* double my_fun_name(double x,double y, double z) = { return x*x+y+z; }  */

@ mean(*x) = sum(x,LENTGH_X)/LENTGH_X 
is interpreted as
/* double mean(double *x) { return sum(x,LENTGH_X)/LENTGH_X } */
.fi

The function \fIsum\fR is a helper function (see below for a list of helper functions). 

.SH NUMERICAL AND GRAPHICAL OPTIONS
.TP
.BR x ", " plot_x
String. Name of the variable to plot on the x-axis (default T)
.TP
.BR y ", " plot_y
String. Name of the variable to plot on the y-axis (default variable of index 0)
.TP
.BR z ", " plot_z
String. Name of the variable to plot on the z-axis (default variable of index 1)
.TP
.BR freeze ", " freeze
Integer. Add (1) or replace ({0}) variables on plot
.TP
.BR curves ", " add_curves
Integer. Add (1) or replace ({0}) curves on plot
.TP
.BR style ", " plot_with_style
String. One of the gnuplot styles: {lines} | points | dots | linespoints ...
.TP
.BR realtime ", " plot_realtime
Integer. Plot in real time, {0} | 1 (not implemented)
.TP
.BR step ", " par_step
Double. Parameter step increment (default 1.1)
.TP
.BR act ", " act_par
String. Name of current parameter parameter (default parameter of index 0, the parameter first declared)
.TP
.BR res ", " odesolver_output_resolution
Integer. Nominal number of output time points (default 201)
.TP
.BR minh ", " odesolver_min_h
Double. Minimal ODE solver time step  (default 1e-5)
.TP
.BR h ", " odesolver_init_h
Double. Initial time step (default 0.1)
.TP
.BR abstol ", " odesolver_eps_abs
Double. ODE solver absolute tolerance (default 1e-6)
.TP
.BR reltol ", " odesolver_eps_rel
Double, ODE solver relative tolerance (default 0.0)
.TP
.BR meth ", " odesolver_step_method
Double. ODE solver stepping method rk2 | {rk4} | rkf45 | rkck | rk8pd
.TP
.BR m/maxfail ", " phasespace_max_fail
Integer. Max number of starting guesses for steady states (default 10000)
.TP
.BR m/abstol ", " phasespace_abs_tol
Double. Absolute tolerance for finding steady states (default 1e-2)
.TP
.BR m/reltol ", " phasespace_rel_tol
Double. relative tolerance for finding steady states (default 1e-2)
.TP
.BR m/range ", " phasespace_search_range
Double. Phase-space search range 
.TP
.BR m/min ", " phasespace_search_min
Double. Phase-space search min 
.TP
.BR  c/h ", " cont_h
Double. Initial parameter continuation step (default 0.1)
.TP
.BR  c/maxh ", " cont_maxh
Double. Maximal parameter continuation step (default 0.1)
.TP
.BR  r/par0 ", " range_par0
Double. Initial parameter value for range (default 0.0)
.TP
.BR  r/par1 ", " range_par1
Double. Final parameter value for rangei (default 1.0)
.TP
.BR r/mstep ", " range_mult_step
Double. Parameter step multiplicative increment (default 1.0, no increment)
.TP
.BR r/astep ", " range_add_step
Double. Parameter step additive increment (default 0.1)
.TP
.BR r/mic ", " range_mult_ic
Double. Initial condition multiplicative factor for range (default 1.0)
.TP
.BR r/aic ", " range_add_ic 
Double. Initial condition additive factor for range (default 0.0)

.SH FUNCTIONS ACTING ON ARRAYS
.TP
.BR \fIdouble\fR " " sum\fR(\fIdouble " " \fI*array\fR, " " \fIlong " " \fIlen\fR)
Sum the elements of the array \fIarrayfR of length \fIlen\fR.
Return the sum of the array
.TP
.BR \fIdouble\fR " " sumstep\fR(\fIdouble " " \fI*array\fR, " " \fIlong " " \fIlen\fR, " " \fIlong " " \fIstep\fR)
Sum only the \fIstep\fR'th elements of the array \fIarray\fR of length \fIlen\fR.
.TP 
.BR \fIdouble\fR " " prod\fR(\fIdouble " " \fI*array\fR, " " \fIlong " " \fIlen\fR) 
Product of the elements of the array \fIarray\fR of length \fIlen\fR.
.TP
.BR \fIdouble\fR " " dotprod\fR(\fIdouble " " \fI*x\fR, " " \fIdouble " " \fI*y\fR, " " \fIlong  " " \fIlen\fR)
Scalar product of two arrays \fIx\fR and \fIy\fR of lengths \fIlen\fR. Returns the scalar product.
.TP
.BR \fIdouble\fR " " conv\fR(\fIdouble " " \fI*u\fR, " " \fIdouble " "  \fI*v\fR, " " \fIlong " " \fIlen\fR) 
convolution product between arrays \fIu\fR and \fIv\fR, each of length \fIlen\fR. Returns the convolution product.
.TP
.BR \fIdouble\fR " " minus\fR(\fIdouble " "  \fIx\fR, " "  \fIdouble " "  \fIy\fR)
Subtraction. 
Used with \fBsumxy\fR.
.TP
.BR \fIdouble\fR " " plus\fR(\fIdouble " "  \fIx\fR, " "  \fIdouble " "  \fIy\fR)
Addition.
Used with \fBsumxy\fR.
.TP
.BR \fIdouble\fR " " sumxy\fR(\fIlong " " \fIlen, " " \fIdouble " " \fI(*f)(double)\fR, " " \fIdouble " " \fI(*g)(double,double)\fR, " " \fIconst " "  \fIdouble " " \fI*x\fR, " " \fIconst " " \fIdouble " " \fIyi\fR)
Sum over j of \fIf\fR(\fIg\fR(\fIx_j\fR,\fIyi\fR)) 
.TP
.BR \fIdouble\fR " " linchaindelay\fR(\fIdouble " " \fIroot\fR, " " \fIdouble " " \fI*chain\fR, " " \fIsize_t " " \fIlink\fR, " " \fIdouble " " \fIdelay\fR, " " \fIsize_t " " \fIlen\fR)
\fIlink\fR'th element of a linear chain \fIbeta\fR*(\fIchain\fR[\fIlink\fR-1]-\fIchain\fR[\fIlink\fR]), (and \fIbeta\fR*(\fIroot\fR-\fIchain\fR[\fI0\fR]))

.SH EXAMPLES
Here is an example of an odexp file

.nf
.RS
# file lotka.odexp
# a simple nonlinear ODE system

P a 0.2; b 0.3

dx/dt = x*(y - a)
dy/dt = y*(b - x)

I x 0.1; y 0.2

T 0 10
.RE
.fi

To print the file current.plot formatted, use
.nf
.RS
hexdump -e '"%f " "%f " "%f " "\\n"' current.plot
.RE
.fi
