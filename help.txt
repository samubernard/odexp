.TH ODEXP 1
.SH NAME
odexp \- fast ODE solver with gnuplot graphical output
.SH DESCRIPTION
.B odexp 
command line tool for ODE simulation.
.SH LIST OF COMMANDS 
.TP
.BR + ", " = ", " C-+ ", " C-= 
Greater. 
Increment current parameter by a multiplicative factor option:par_step 
.TP 
.BR - ", " C--
Smaller. 
Decrement current parameter by a multiplicative factor option:par_step
.TP
.BR ] ", " C-]    
Plot next. 
Plot next variable on the y-axis (cyclic)
.TP
.BR [ ", " C-[ 
Plot previous. 
Plot previous variable on the y-axis (cyclic)
.TP
.BR >
Inc. 
Double the number of time steps 
.TP
.BR <
Dec. 
Halve the number of time steps 
.TP
.BR ! " " \fIfilename\fR   
print(!). 
Try to save the current plot to \fIfilename\fR
.TP
.BR A 
Reset (A)xes. 
Reset all axes to linear scale 
.TP
.BR a\fIu\fR\fIs\fR ", " a\fIs\fR\fIu\fR
(a)xis. 
Set axis \fIu\fR={x,y} to scale \fIs\fR={l,n}, n for linear (normal) scale and l for log scale 
.TP
.BR ci " " \fI{\fIind\fR|\fIvar\fR} " " \fIval\fR   
(i)nit. 
Set value of initial condition of variable with index  \fIi\fR or name \fIvar\fR to \fIval\fR
.TP
.BR cI " " \fIind\fR         
re-(I)nit. 
Revert variable \fIind\fR to expression
.TP
.BR cl            
to (l)ast. 
Change to last initial conditions, same as \fBil\fR
.TP
.BR co " " \fR{\fIind\fR|\fIvar\fR} " " \fIval\fR   
(o)ption. 
Set value of option with index \fIind\fR or name \fIvar\fR to \fIval\fR
.TP
.BR ct " " \fIti\fR " " \fIval\fR   
(t)span. 
Set value of \fIti\fR to v (\fIti\fR = 0 or 1) 
.TP
.BR d              
(d)efaults. 
Reload the parameter file 
.TP
.BR E
De-(E)xtend. Decrease the time span by a factor 2
.TP
.BR e
(e)xtend. Increase the time span by a factor 2
.TP
.BR f              
(f)reeze. 
Toggle plot freeze (on/off) 
.TP
.BR g " " \fIcmd\fR        
(g)nuplot. 
Send the command cmd to gnuplot 
.TP
.BR h              
(h)elp. 
Display this help
.TP
.BR I              
reset (I)nit. 
Set initial conditions to previous 
.TP
.BR il            
(l)ast. 
Use the state of the system at t1 as initial conditions 
.TP 
.BR in            
(n)ew. 
Loop through initial conditions. 
Set to I to revert to expression, enter to keep current initial condition
.TP
.BR is            
(s)teady state. 
Set initial condition to steady state. 
Steady state must have been computed with \fBms\fR
.TP
.BR la            
(a)ux. 
List all auxiliary functions 
.TP
.BR le            
(e)xpressions. 
List all parametric expressions
.TP
.BR li            
(i)nit. 
List all variables with initial conditions 
.TP
.BR ln            
(n)br eqs. 
Display system size
.TP
.BR lp            
(p)ar. 
List all parameters 
.TP 
.BR lx            
d(x)/dt. 
List all equations and auxiliary functions 
.TP
.BR ls            
(s)tst. 
List steady states
.TP
.BR lo          
(o)ptions. 
List options 
.TP
.BR mm            
(m)any stst. 
Try to find all steady states 
.TP
.BR mr 
(r)ange. 
Range over parameters
.TP
.BR ms            
(s)teady state. 
Find a steady state with starting guess given by initial conditions 
.TP
.BR o " " \fIfilename\fR 
(o)pen. 
Load parameters and options from file \fIfilename\rR 
.TP
.BR P " " \fIval\fR        
(P)ar. 
Set current parameter to \fIval\fR
.TP
.BR p " " \fR{\fIind\fR|\fIpar\fR} " " \fR[\fIval\fR]     
(p)ar. 
Make parameter with index \fIind\fr or name \fipar\fr the current parameter, and set its value to \fIval\fR 
When val is missing, the parameter value is unchanged
.TP
.BR Q              
(Q)uit. 
Quit without snapshot 
.TP
.BR q " " \fR[\fImsg\fR]        
(q)uit. 
Quit and snap with optional message \fImsg\fR 
.TP
.BR r
(r)eplot. 
Repeat the last gnuplot command (replot)
.TP
.BR s " " \fR[\fImsg\fR]        
(s)nap. 
Snapshot of current simulation and parameter values with optional \fImsg\fR 
.TP
.BR t " " \fR[\fIt0\fR] " " \fIt1\fR
(t)span. 
Set time span from \fIt0\fR to \fIt1\fR. 
By default t0 is not changed. 
Final time \fIt1\fR must be larger than \fIt0\fR.
.TP
.BR u              
C(u)rves. 
Toggle add curves to plot (on/off) 
.TP
.BR v ", " 2 ", " 3 " " \fR{\fIi\fR|\fIx\fR} " " \fR{\fIj\fR|\fIy\fR} " " \fR[{\fIk\fR|\fIz\fR}]      
(v)iew. 
Set 2D/3D view, x-axis to index \fIi\fR (variable \fIx\fR), y-axis to \fIj\fR (variable \fIy\fR), 
and z-axis to \fIk\fR (variable \fIz\fR). 
Set variable to T or index -1 for time.
\fB2\fR takes only the first two arguments, and the \fB3\fR takes the three arguments
.TP
.BR x " " \fR{\fIind\fR| \fIvar\fR}
plot(x). 
Plot variable with index \fIind\fR or name \fIvar\fR on the x-axis
.TP
.BR y " " \fR{\fIind\fR|\fIvar\fR}
Plot(y). 
Plot variable with index \fIind\fR or name \fIvar\fR on the y-axis

.SH LIST OF ODEXP TYPES
.TP
.BR P 
Parameters. 
Must be numerical (double). 
Parameters appear in the list of parameters. 
They can be modified from within odexp and can be ranged over. 
Parameters are declared in name value pairs, separated with semicolumns (;), or one parameter per line: P a 0.1; b 0.2
.TP
.BR E
Expressions. Expressions are function of the parameters. They cannot be modified. 
Expression are declared as name expr pairs.
.TP
.BR A 
Auxiliary functions. 
Auxiliary functions depend on parameters, expressions and variables. 
Auxiliary functions are declared as name function pairs
.TP
.BR D
Dynamical variables are the dependent variables of the ODE system.
Dynamical variable x is declared as dx/dt or x' followed by = and the RHS of the equation
.TP
.BR I
Initial conditions. 
Initial conditions can be numerical, or can be expression that depend on parameters, expressions and auxiliary variables.
If initial conditions are expressions, their values can be overruled or reset in odexp.
.TP
.BR O
Options. Options can be preset. See below for a list of options.
.TP
.BR T
Time span. Time span is an array of the form t0 ti ... t1 where t0 and t1 are the initial and final times. 
Intermediate values ti are stopping time, where the system is reset to initial condition. This is useful when systems
are discontinuous, and variable need to be reset at known timepointpoints.
.TP 
.BR U
Uniform random array. 
.TP
.BR S
Static variable. Must be numerical. Static variables cannot be modified.

.SH LIST OF OPTIONS
.TP
.BR x ", " plot_x
String. Name of the variable to plot on the x-axis (default T)
.TP
.BR y ", " plot_y
String. Name of the variable to plot on the y-axis (default variable of index 0)
.TP
.BR z ", " plot_z
String. Name of the variable to plot on the z-axis (default variable of index 1)
.TP
.BR freeze ", " freeze
Int. Add (1) or replace ({0}) variables on plot
.TP
.BR curves ", " add_curves
Int. Add (1) or replace ({0}) curves on plot
.TP
.BR style ", " plot_with_style
String. One of the gnuplot styles: {lines} | points | dots | linespoints ...
.TP
.BR realtime ", " plot_realtime
Int. Plot in real time, {0} | 1 (not implemented)
.TP
.BR step ", " par_step
Double. Parameter step increment (default 1.1)
.TP
.BR act ", " act_par
String. Name of current parameter parameter (default parameter of index 0, the parameter first declared)
.TP
.BR res ", " odesolver_output_resolution
Int. Nominal number of output time points (default 201)
.TP
.BR minh ", " odesolver_min_h
Double. Minimal ODE solver time step  (default 1e-5)
.TP
.BR h ", " odesolver_init_h
Double. Initial time step (default 0.1)
.TP
.BR abstol ", " odesolver_eps_abs
Double. ODE solver absolute tolerance (default 1e-6)
.TP
.BR reltol ", " odesolver_eps_rel
Double, ODE solver relative tolerance (default 0.0)
.TP
.BR meth ", " odesolver_step_method
Double. ODE solver stepping method rk2 | {rk4} | rkf45 | rkck | rk8pd
.TP
.BR m/maxfail ", " phasespace_max_fail
Int. Max number of starting guesses for steady states (default 10000)
.TP
.BR m/abstol ", " phasespace_abs_tol
Double. Absolute tolerance for finding steady states (default 1e-2)
.TP
.BR m/reltol ", " phasespace_rel_tol
Double. relative tolerance for finding steady states (default 1e-2)
.TP
.BR m/range ", " phasespace_search_range
Double. Phase-space search range 
.TP
.BR m/min ", " phasespace_search_min
Double. Phase-space search min 
.TP
.BR  c/h ", " cont_h
Double. Initial parameter continuation step (default 0.1)
.TP
.BR  r/par0 ", " range_par0
Double. Initial parameter value for range (default 0.0)
.TP
.BR  r/par1 ", " range_par1
Double. Final parameter value for rangei (default 1.0)
.TP
.BR r/mstep ", " range_mult_step
Double. Parameter step multiplicative increment (default 1.0, no increment)
.TP
.BR r/astep ", " range_add_step
Double. Parameter step additive increment (default 0.1)
.TP
.BR r/mic ", " range_mult_ic
Double. Initial condition multiplicative factor for range (default 1.0)
.TP
.BR r/aic ", " range_add_ic 
Double. Initial condition additive factor for range (default 0.0)

.SH FUNCTIONS ACTING ON ARRAYS
.TP
.BR \fIdouble\fR " " sum\fR(\fIdouble " " \fI*array\fR, " " \fIlong " " \fIlen\fR)
Sum the elements of the array \fIarrayfR of length \fIlen\fR.
Return the sum of the array
.TP
.BR \fIdouble\fR " " sumstep\fR(\fIdouble " " \fI*array\fR, " " \fIlong " " \fIlen\fR, " " \fIlong " " \fIstep\fR)
Sum only the \fIstep\fR'th elements of the array \fIarray\fR of length \fIlen\fR.
.TP 
.BR \fIdouble\fR " " prod\fR(\fIdouble " " \fI*array\fR, " " \fIlong " " \fIlen\fR) 
Product of the elements of the array \fIarray\fR of length \fIlen\fR.
.TP
.BR \fIdouble\fR " " dotprod\fR(\fIdouble " " \fI*x\fR, " " \fIdouble " " \fI*y\fR, " " \fIlong  " " \fIlen\fR)
Scalar product of two arrays \fIx\fR and \fIy\fR of lengths \fIlen\fR. Returns the scalar product.
.TP
.BR \fIdouble\fR " " conv\fR(\fIdouble " " \fI*u\fR, " " \fIdouble " "  \fI*v\fR, " " \fIlong " " \fIlen\fR) 
convolution product between arrays \fIu\fR and \fIv\fR, each of length \fIlen\fR. Returns the convolution product.
.TP
.BR \fIdouble\fR " " minus\fR(\fIdouble " "  \fIx\fR, " "  \fIdouble " "  \fIy\fR)
Subtraction. 
Used with \fBsumxy\fR.
.TP
.BR \fIdouble\fR " " plus\fR(\fIdouble " "  \fIx\fR, " "  \fIdouble " "  \fIy\fR)
Addition.
Used with \fBsumxy\fR.
.TP
.BR \fIdouble\fR " " sumxy\fR(\fIlong " " \fIlen, " " \fIdouble " " \fI(*f)(double)\fR, " " \fIdouble " " \fI(*g)(double,double)\fR, " " \fIconst " "  \fIdouble " " \fI*x\fR, " " \fIconst " " \fIdouble " " \fIyi\fR)
Sum over j of \fIf\fR(\fIg\fR(\fIx_j\fR,\fIyi\fR)) 


.SH EXAMPLES
Here is an example of an odexp file

.nf
.RS
# file lotka.odexp
# a simple nonlinear ODE system

P a 0.2; b 0.3

dx/dt = x*(y - a)
dy/dt = y*(b - x)

I x 0.1; y 0.2

T 0 10
.RE
.fi

TODO


