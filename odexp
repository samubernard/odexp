#!/bin/bash


SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
ODEXPDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

set -eu # makes your program exit on error or unbound variable

# require gawk
hash gawk 2>/dev/null || { echo >&2 "I require gawk but it's not installed.  Aborting."; exit 1; }

mkdir -p .odexp

# ---------------------------------------
# Files created in .odexp
# model.op: model file where all constants are replaced by their values
# model.par contains parameter, initial condition, tspan and options
# model.c: C file implementation 
# ---------------------------------------

echo "# odexp file name: $1" >.odexp/model.op
echo "# In this file, all constant (variable starting with _)" >>.odexp/model.op
echo "# are replaced with their value" >>.odexp/model.op
echo "" >>.odexp/model.op

# replace all constants (variable starting with '_') by their value
# remove all ending ;
# replace all ; by \n 
gawk '$1 !~ /#/ {gsub(";( )*$","",$0)};
    $1 !~ /#/ {gsub(";","\n"$1,$0)};
    $1 ~ /^( )*_/ {n++; name[n]=$1; val[n]=$2; };
    $1 !~ /^( )*_/ { 
        if(n>0) {
            for(i=1;i<=n;i++) {
                gsub(name[i]"\\>",val[i],$0);
            }
        }
    };
    {print $0}' $1 >>.odexp/model.op



file=.odexp/model.op

# if two input files, then second one should contain parameters
if [ "$#" -eq 2 ]; then
    parfile=$2    
    #echo "warning: parameter file $parfile will not be taken into account"
    cp $2 .odexp/model.par
else # .odexp/model.op and /odexp.par are the same
    parfile=$file   
    cp $parfile .odexp/model.par
fi



declare_iterators () {
    gawk -F ' ' -v i=1 '/(\[.+\])+/ && $1 !~ /#/ && $1 !~ /^[cC]/ { match($2,/(\[.+\])+/);
        a=substr($2, RSTART, RLENGTH);
        split(a,b,/[\[\]=:]/);
        for(k=2;k<=length(b);k+=4) 
        { 
          iter[i]=b[k]; 
          i++
        }
      }
      END {
        for(j=1;j<length(iter);j++) 
        { 
          for(k=j+1;k<=length(iter);k++)
          {
            if(iter[j]==iter[k])
            {
              iter[k]=""
            }
          }
        };
        nu=1;
        for(j=1;j<=length(iter);j++)
        {
          if(iter[j]!="")
          {
            uniq[nu]=iter[j];
            nu++
          }
        }
        if(length(uniq)>0)
        { 
          printf "    size_t ";
          for(k=1;k<length(uniq);k++)
          {
            printf "%s,", uniq[k] 
          };
          printf "%s;\n", uniq[length(uniq)]; 
        };
      }' $file >>.odexp/model.c
}

set_defines () {
    gawk -F ' ' '$1 ~ /^[sS][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {
        var=$2;
        $1="";
        $2="";
        ex=$0;
        printf "#define %s %s\n", var, ex;
        }' $file >>.odexp/model.c
}

declare_constant_array () {
    # declare and initialize constant array
    gawk -F ' ' '$1 ~ /^[cC][a-zA-Z0-9]*$/ {
        var=$2;
        $1="";
        $2="";
        ex=$0;
        printf "static const double %s = %s;\n", var, ex;
    }' $file >>.odexp/model.c  
}

declare_array_from_file () {
    # expecting: F my_array_name nRow nCols filename.dat 
    gawk -F ' ' '$1 ~ /^[fF][a-zA-Z0-9]*$/ {
        filename=$5;
        nRow=$3;
        nCol=$4;
        var=$2;
        printf "/* array from file: %s */\n", filename;
        printf "static const double %s[%d][%d] = {", var, nRow, nCol;
        i=0;
        while(i<(nRow-1))
        {
            getline <filename;
            printf "{";
            for(j=1;j<nCol;j++)
                {
                    printf "%g, ", $j;
                }
            printf "%g},\\\n        ", $nCol; 
            i++;
        }
        getline <filename
        printf "{";
        for(j=1;j<nCol;j++)
            {
                printf "%g, ", $j;
            }
        printf "%g}};\n\n", $nCol;
    }' $file >>.odexp/model.c  
}

declare_parameters () {
# find variable parameters and declare them in model.c 
    gawk -F ' ' -v i=0 '$1 ~ /^[pP][a-zA-Z0-9]*$/ {
        split($0,a,/!/);
        switch (toupper(a[2])) {
            case /INITIAL/ :
            case /UNUSED/  :
            case /INEXPR/  :
                printf "    double %s __attribute__((unused)) = pars_[%d];\n", $2, i++;
                break;
            default :
                printf "    double %s = pars_[%d];\n", $2, i++;
        }
    }' $file >>.odexp/model.c
}

declare_parameters_ic () {
# find variable parameters and declare them in model.c 
    gawk -F ' ' -v i=0 '$1 ~ /^[pP][a-zA-Z0-9]*$/ {
        split($0,a,/!/);
        switch (toupper(a[2])) {
            case /INITIAL/ :
            case /INEXPR/  :
                printf "    double %s = pars_[%d];\n", $2, i++;
                break;
            default :
                printf "    double %s __attribute__((unused)) = pars_[%d];\n", $2, i++;
        }
    }' $file >>.odexp/model.c
}

declare_parametric_expressions () {
    # find parametric expressions and declare them in .odexp/model.c
    # find parametric expression vectors and declare them in .odexp/model.c
    gawk -F ' ' '$1 ~ /^[eE][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {
      printf "    double %s;\n", $2 };
      $1 ~ /^[eE]/ && $2 ~ /(\[.+\])+/ {match($2,/(\[.+:.+\])+/);
      a=substr($2, RSTART, RLENGTH);
      split(a,b,/[\[\]=:]/);
      split($2,c,/\[/);
      myvar=c[1];
      {printf "    double %s", myvar };
      for (k=2; k<=length(b); k+=4) { printf "[%s]", b[k+2] }; 
      {printf ";\n"} }' $file >>.odexp/model.c
}

declare_mean_fields () {
    # find mean fields and declare them in .odexp/model.c
    # no vector allowed
    gawk -F ' ' '$1 ~ /^[mM][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {
      printf "    double %s;\n", $2 
    }' $file >>.odexp/model.c
}

declare_variables () {
    # find variables and declare them to model.c
    # find vector variables and declare them to model.c
    gawk -F ' ' '$1 ~ /^[iI][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {printf "    double %s;\n", $2 };
      $1 ~ /^[iI][a-zA-Z0-9]*$/ && $2 ~ /(\[.+:.+\])+/ {match($2,/(\[.+:.+\])+/);
      a=substr($2, RSTART, RLENGTH);
      split(a,b,/[\[\]=:]/);
      split($2,c,/\[/);
      myvar=c[1];
      {printf "    double %s", myvar };
      for (k=2; k<=length(b); k+=4) { printf "[%s]", b[k+2] }; 
      {printf ";\n"} }' $file >>.odexp/model.c
}

declare_auxiliary_functions () {
    # find auxiliary variables and declare them to model.c
    # find vector auxiliary function and declare them to model.c
    gawk -F ' ' '$1 ~ /^[aA][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {printf "    double %s;\n", $2};
      $1 ~ /^[aA][a-zA-Z0-9]*$/ && $2 ~ /(\[.+:.+\])+/ {match($2,/(\[.+:.+\])+/);
      a=substr($2, RSTART, RLENGTH);
      split(a,b,/[\[\]=:]/);
      split($2,c,/\[/);
      myvar=c[1];
      {printf "    double %s", myvar };
      for (k=2; k<=length(b); k+=4) { printf "[%s]", b[k+2] }; 
      {printf ";\n"} }' $file >>.odexp/model.c
}

define_functions () {
    # declare and define functions
    gawk -F '=' '$1 ~ /^@/ {
        expr=$2;
        gsub(/^[ ]*/,"",expr);
        gsub(/[ ]*$/,"",expr);
        split($1,myfunc,/[@=]/);
        split(myfunc[2],funcargs,/[()]/);
        funcname=funcargs[1];
        myargs=funcargs[2];
        nargs=split(myargs,myargs_list,/,/);
        gsub(/^[ ]*/,"",funcname);
        gsub(/[ ]*$/,"",funcname);
        printf "double %s(", funcname;
        for(i=1;i<nargs;i++) {
            gsub(/^[ ]*/,"",myargs_list[i]);
            gsub(/[ ]*$/,"",myargs_list[i]);
            printf "double %s, ", myargs_list[i]; 
        }
        gsub(/^[ ]*/,"",myargs_list[nargs]);
        gsub(/[ ]*$/,"",myargs_list[nargs]);
        printf "double %s", myargs_list[nargs];
        printf  ") { return %s; }\n", expr;
    }' $file >>.odexp/model.c  
}

define_parametric_expressions () {
    # define parametric expressions and declare them in .odexp/model.c
    # define vector parametric expressions and declare them in .odexp/model.c
    gawk -F ' ' '$1 ~ /^[eE][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {
      lhs=$2;
      $1="";
      $2="";
      ex=$0;
      printf "    %s = %s;\n", lhs, ex
      };
      $1 ~ /^[eE]/ && $2 ~ /(\[.+:.+\])+/ {match($2,/(\[.+:.+\])+/);
      a=substr($2, RSTART, RLENGTH);
      split(a,b,/[\[\]=:]/);
      split($2,c,/\[/);
      myvar=c[1];
      $1="";
      $2="";
      ex=$0;
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "%-*sfor(%s=%s;%s<%s;%s++) {\n", k+2, "", b[k], b[k+1], b[k], b[k+2], b[k] 
      };
      {printf "%-*s%s", k+2, "", myvar};
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "[%s]", b[k] 
      }; 
      {printf " = %s; \n", ex};
      for (k=length(b)-1; k>=2; k-=4)
      {
        printf "%-*s}\n", k, ""    
      };
      }' $file >>.odexp/model.c
}

define_mean_fields () {
    # define mean fields and declare them in .odexp/model.c
    # No vectors allowed 
    gawk -F ' ' -v nv=0 '$1 ~ /^[mM][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {
      lhs=$2;
      printf "    %s = psi_[%d];\n", lhs, nv; nv++
    }' $file >>.odexp/model.c
}

get_mean_fields () {
    # 
    gawk -F ' ' -v nv=0 '$1 ~ /^[mM][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {
      $1="";
      $2="";
      rhs=$0;
      printf "            p_->psi[%d] += %s;\n", nv, rhs; nv++
    }' $file >>.odexp/model.c
}

define_auxiliary_functions () {
    # define auxiliary function to model.c
    gawk -F ' ' '$1 ~ /^[aA][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {
      lhs=$2;
      $1="";
      $2="";
      split($0,exa,/!/);
      ex=exa[1];
      printf "    %s = %s;\n", lhs, ex
      };
      
      $1 ~ /^[aA][a-zA-Z0-9]*$/ && $2 ~ /(\[.+:.+\])+/ {match($2,/(\[.+:.+\])+/);
      a=substr($2, RSTART, RLENGTH);
      split(a,b,/[\[\]=:]/);
      split($2,c,/\[/);
      myvar=c[1];
      $1="";
      $2="";
      split($0,exa,/!/);
      ex=exa[1];
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "%-*sfor(%s=%s;%s<%s;%s++) {\n", k+2, "", b[k], b[k+1], b[k], b[k+2], b[k] 
      };
      {printf "%-*s%s", k+2, "", myvar};
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "[%s]", b[k] 
      }; 
      {printf " = %s;\n%-*s}\n", ex, k-2, ""}; }' $file >>.odexp/model.c
}

define_variables () {
  gawk -F ' ' -v nv=0 '$1 ~ /^[dD][a-zA-Z0-9_]+(\[[^:]\])*\/[dD]{1}[tT]{1}/ {
      match($1,/^[dD][a-zA-Z0-9_\[\]]+/);
      lhs=substr($1, RSTART+1,RLENGTH-1);
      printf "    %s = y_[%d];\n", lhs, nv; nv++};
      
      $1 ~ /^[dD][a-zA-Z0-9_]+(\[.+=.+:.+\])+\/[dD][tT]/ {  
      match($1,/(\[.+\])+/);
      a=substr($1, RSTART, RLENGTH);
      split(a,b,/[\[\]=:]/);
      match($1,/^[dD][a-zA-Z0-9_]+/);
      myvar=substr($1, RSTART+1,RLENGTH-1);
      split($0,e,/=/);
      myexpr=e[length(e)];
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "%-*sfor(%s=%s;%s<%s;%s++) {\n", k+2, "", b[k], b[k+1], b[k], b[k+2], b[k] 
      };
      {printf "%-*s%s", k+2, "", myvar};
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "[%s]", b[k] 
      }; 
      {printf " = y_["};
      for (k=2; k<=length(b); k+=4)
      {
        printf "%s+%d", b[k], nv-b[k+1];
        nv+=b[k+2]-b[k+1]
      }
      {  printf "];\n %-*s}\n", k-2, "" };  
    }' $file >>.odexp/model.c
}

define_equations () {
    gawk -F ' ' -v nv=0 '$1 ~ /^[dD][a-zA-Z0-9_]+(\[[^:]\])*\/[dD]{1}[tT]{1}/ {
      split($0,ex,/[=!]/); 
      printf "    f_[%d] = %s;\n", nv, ex[2]; nv++ };
      
      $1 ~ /^[dD][a-zA-Z0-9_]+(\[.+=.+:.+\])+\/[dD][tT]/ {
      match($1,/(\[.+\])+/);
      a=substr($1, RSTART, RLENGTH);
      split(a,b,/[\[\]=:]/);
      myvar="f_";
      split($0,e,/[^=]=[^=]/);
      myrhs=e[length(e)];
      split(myrhs,e2,/!/);
      myexpr=e2[1];
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "%-*sfor(%s=%s;%s<%s;%s++) {\n", k+2, "", b[k], b[k+1], b[k], b[k+2], b[k] 
      };
      {printf "%-*s%s", k+2, "", myvar};
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "[%s+%d]", b[k], nv-b[k+1]
        nv+=b[k+2]-b[k+1] 
      }; 
      {printf " = %s;\n%-*s}\n", myexpr, k-2, ""}; }' $file >>.odexp/model.c
}

define_aux_pointer () {
    gawk -F ' ' -v nv=0 '$1 ~ /^[aA][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {
      ex=$2;
      printf "    aux_[%d] = %s;\n", nv, ex; nv++
      };
      
      $1 ~ /^[aA][a-zA-Z0-9]*$/ && $2 ~ /(\[.+:.+\])+/ { match($2,/(\[.+:.+\])+/);
      a=substr($2, RSTART, RLENGTH);
      split(a,b,/[\[\]=:]/);
      myvar="aux_";
      split($2,c,/\[/);
      ex=c[1];
      printf "%-*sfor(%s=%s;%s<%s;%s++) {\n", 4, "", b[2], b[3], b[2], b[4], b[2]; 
      printf "%-*s%s[%s+%d]", 7, "", myvar, b[2], nv;
      printf " = %s[%s];\n%-*s}\n", ex, b[2], 4, "";
      nv+=b[4]-b[3]
      }' $file >>.odexp/model.c
}

define_parametric_expression_pointer () {
    gawk -F ' ' -v nv=0 '$1 ~ /^[eE][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {
      lhs=$2;
      printf "    expr_[%d] = %s;\n", nv, lhs; nv++
      };
      $1 ~ /^[eE]/ && $2 ~ /(\[.+:.+\])+/ {match($2,/(\[.+:.+\])+/);
      a=substr($2, RSTART, RLENGTH);
      split(a,b,/[\[\]=:]/);
      split($2,c,/\[/);
      myrhsvar=c[1];
      $1="";
      $2="";
      ex=$0;
      printf "    ii_ = 0;\n";
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "%-*sfor(%s=%s;%s<%s;%s++) {\n", k+2, "", b[k], b[k+1], b[k], b[k+2], b[k] 
      };
      {printf "%-*sexpr_[%d+ii_++]", k+2, "", nv};
      {printf " = %s", myrhsvar};
      mm = 1;
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "[%s]", b[k] 
        mm*=b[k+2]-b[k+1] 
      }; 
      nv+=mm;
      {printf ";\n"};
      for (k=length(b)-1; k>=2; k-=4)
      {
        printf "%-*s}\n", k, ""    
      };
      }' $file >>.odexp/model.c
}

define_parametric_expressions_from_expr_pointer () {
    gawk -F ' ' -v nv=0 '$1 ~ /^[eE][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {
      lhs=$2;
      printf "    %s = expr_[%d];\n", lhs, nv; nv++
      };
      $1 ~ /^[eE]/ && $2 ~ /(\[.+:.+\])+/ {match($2,/(\[.+:.+\])+/);
      a=substr($2, RSTART, RLENGTH);
      split(a,b,/[\[\]=:]/);
      split($2,c,/\[/);
      myrhsvar=c[1];
      $1="";
      $2="";
      ex=$0;
      printf "    ii_ = 0;\n";
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "%-*sfor(%s=%s;%s<%s;%s++) {\n", k+2, "", b[k], b[k+1], b[k], b[k+2], b[k] 
      };
      {printf "%*s%s", k+2, "",  myrhsvar};
      mm = 1;
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "[%s]", b[k] 
        mm*=b[k+2]-b[k+1] 
      }; 
      {printf " = expr_[%d+ii_++]", nv};
      nv+=mm;
      {printf ";\n"};
      for (k=length(b)-1; k>=2; k-=4)
      {
        printf "%-*s}\n", k, ""    
      };
      }' $file >>.odexp/model.c
}

define_initial_conditions () {
    gawk -F ' ' -v nv=0 '$1 ~ /^[iI][a-zA-Z0-9]*$/ && $2 !~ /\[.+:.+\]/ {
      $1="";
      $2="";
      split($0,exa,/!/);
      ex=exa[1];
      printf "    y_[%d] = %s;\n", nv, ex;
      nv++
      };
      $1 ~ /^[iI][a-zA-Z0-9]*$/ && $2 ~ /(\[.+:.+\])+/ {match($2,/(\[.+:.+\])+/);
      a=substr($2, RSTART, RLENGTH);
      split(a,b,/[\[\]=:]/);
      split($2,c,/\[/);
      myvar="y_";
      $1="";
      $2="";
      split($0,exa,/!/);
      ex=exa[1];
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "%-*sfor(%s=%s;%s<%s;%s++) {\n", k+2, "", b[k], b[k+1], b[k], b[k+2], b[k] 
      };
      {printf "%-*s%s", k+2, "", myvar};
      for (k=2; k<=length(b); k+=4) 
      { 
        printf "[%s+%d]", b[k], nv 
        nv+=b[k+2]-b[k+1]
      }; 
      {printf " = %s;\n%-*s}\n", ex, k-2, ""}; }' $file >>.odexp/model.c
}

# ==========================================================================================
# Write C file
# ==========================================================================================
echo "/* function implementations */" >.odexp/model.c
echo "" >>.odexp/model.c
echo "#ifndef __GNUC__ " >>.odexp/model.c
echo "#  define  __attribute__(x)  /*NOTHING*/" >>.odexp/model.c
echo "#endif" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "/* =================================================================" >>.odexp/model.c
echo "                              Libraries" >>.odexp/model.c
echo "================================================================= */" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "#include <gsl/gsl_errno.h>" >>.odexp/model.c
echo "#include <gsl/gsl_vector.h>" >>.odexp/model.c
echo "#include <gsl/gsl_matrix.h>                              " >>.odexp/model.c
echo "#include <math.h>                              " >>.odexp/model.c
echo "" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "/* =================================================================" >>.odexp/model.c
echo "                              Header files" >>.odexp/model.c
echo "================================================================= */" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "#include \"odexp.h\"" >>.odexp/model.c
echo "#include \"utils_odexp.h\"" >>.odexp/model.c
echo "#include \"rand_gen.h\"" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "/* =================================================================" >>.odexp/model.c
echo "                              Defines" >>.odexp/model.c
echo "================================================================= */" >>.odexp/model.c
echo "" >>.odexp/model.c
set_defines
echo "" >>.odexp/model.c
echo "/* =================================================================" >>.odexp/model.c
echo "                              Global variables" >>.odexp/model.c
echo "================================================================= */" >>.odexp/model.c
# ====================================================================================
# DECLARE AND DEFINE CONSTANT ARRAYS
echo "" >>.odexp/model.c
echo "/* Declaration and definition of constant arrays from files */" >>.odexp/model.c
declare_array_from_file
echo "" >>.odexp/model.c  
# ====================================================================================
# ====================================================================================
# DECLARE AND DEFINE CONSTANT ARRAYS
echo "/* Declaration and definition of constant arrays */" >>.odexp/model.c
declare_constant_array
echo "" >>.odexp/model.c  
# ====================================================================================
# ====================================================================================
# DECLARE AND DEFINE FUNCTIONS
echo "/* Declaration and definition of functions */" >>.odexp/model.c
define_functions
echo "" >>.odexp/model.c  
# ====================================================================================

echo "/* =================================================================" >>.odexp/model.c
echo "                              Functions" >>.odexp/model.c
echo "================================================================= */" >>.odexp/model.c
echo "int multiroot_rhs( const gsl_vector *x, void *params, gsl_vector *f);" >>.odexp/model.c
echo "int pop_rhs(double t, const double y[], double f[], void *params);" >>.odexp/model.c
echo "int ode_rhs(double t, const double y_[], double f_[], void *params);" >>.odexp/model.c
echo "int pop_init_conditions(const double t, double y[], void *params);" >>.odexp/model.c
echo "int ode_init_conditions(const double t, double y_[], void *params);" >>.odexp/model.c
echo "" >>.odexp/model.c

# ====================================================================================
# BEGIN MAIN 
echo "int main ( int argc, char *argv[] )" >>.odexp/model.c
echo "{" >>.odexp/model.c
echo "    int status;" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "    if ( argc == 2 ) {" >>.odexp/model.c
echo "        status = odexp(pop_rhs,pop_init_conditions,multiroot_rhs,argv[1]);" >>.odexp/model.c
echo "    }" >>.odexp/model.c
echo "    else {" >>.odexp/model.c
echo "        status = odexp(pop_rhs,pop_init_conditions,multiroot_rhs,\"unkown\");" >>.odexp/model.c
echo "    }" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "    exit(EXIT_SUCCESS);" >>.odexp/model.c
echo "}" >>.odexp/model.c
echo "" >>.odexp/model.c
# END MAIN
# ====================================================================================

# ====================================================================================
# BEGIN MULTIROOT_RHS
echo "/* Wrapper function for ode_rhs. Modify at your own risks */" >>.odexp/model.c
echo "int multiroot_rhs( const gsl_vector *x, void *params, gsl_vector *f)" >>.odexp/model.c
echo "{" >>.odexp/model.c
echo "    double *y,*ff;" >>.odexp/model.c
echo "    size_t i;" >>.odexp/model.c
echo "    int ode_system_size = x->size;" >>.odexp/model.c
echo "    y = malloc(ode_system_size*sizeof(double));" >>.odexp/model.c
echo "    ff = malloc(ode_system_size*sizeof(double));" >>.odexp/model.c
echo "    for ( i = 0; i<ode_system_size; i++ )" >>.odexp/model.c
echo "    {" >>.odexp/model.c
echo "        y[i] = gsl_vector_get(x, i);" >>.odexp/model.c
echo "    }" >>.odexp/model.c
echo "    ode_rhs(0.0,y,ff,params);" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "    for ( i=0; i<ode_system_size; i++ )" >>.odexp/model.c
echo "    {" >>.odexp/model.c
echo "        gsl_vector_set(f, i, ff[i]);" >>.odexp/model.c
echo "    }" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "    free(y);" >>.odexp/model.c
echo "    free(ff);" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "    return GSL_SUCCESS;" >>.odexp/model.c
echo "}" >>.odexp/model.c
echo "" >>.odexp/model.c
# END MULTIROOT_RHS
# ====================================================================================

# ====================================================================================
# BEGIN POP_RHS
echo "/* POP_RHS replicate ode_rhs pop_size times. y and f are array of size pop_size*ode_system_size */" >>.odexp/model.c
echo "int pop_rhs(double t, const double y[], double f[], void *params)" >>.odexp/model.c
echo "{" >>.odexp/model.c
echo "    size_t i = 0, j;" >>.odexp/model.c
echo "    par *p_ = SIM->pop->start;" >>.odexp/model.c
echo "    par *other_ = (par *)NULL;" >>.odexp/model.c
echo "    while ( p_ != NULL )" >>.odexp/model.c
echo "    {" >>.odexp/model.c
echo "        /* update mean fields */" >>.odexp/model.c
echo "        for(j=0;j<p_->nbr_psi;j++)" >>.odexp/model.c
echo "        {" >>.odexp/model.c
echo "            p_->psi[j] = 0.0;" >>.odexp/model.c
echo "        }" >>.odexp/model.c
echo "        other_ = SIM->pop->start;" >>.odexp/model.c
echo "        while ( other_ != NULL )" >>.odexp/model.c
echo "        {" >>.odexp/model.c
get_mean_fields
echo "            other_ = other_->nextel;" >>.odexp/model.c
echo "        }" >>.odexp/model.c
echo "        ode_rhs(t, y+i*p_->nbr_y, f+i*p_->nbr_y, p_);" >>.odexp/model.c
echo "        i++;" >>.odexp/model.c
echo "        p_ = p_->nextel;" >>.odexp/model.c
echo "    }" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "    return GSL_SUCCESS;" >>.odexp/model.c
echo "}" >>.odexp/model.c
echo "" >>.odexp/model.c
# END POP_RHS
# ====================================================================================

# ====================================================================================
# BEGIN POP_INIT_CONDITIONS
echo "/* POP_INIT_CONDITIONS replicate ode_init_conditions pop_size times. y is an array of size pop_size*ode_system_size */" >>.odexp/model.c
echo "int pop_init_conditions(const double t, double y[], void *params)" >>.odexp/model.c
echo "{" >>.odexp/model.c
echo "    size_t i = 0, j;" >>.odexp/model.c
echo "    par *p_ = SIM->pop->start;" >>.odexp/model.c
echo "    while ( p_ != NULL )" >>.odexp/model.c
echo "    {" >>.odexp/model.c
echo "        ode_init_conditions(t, y+i*p_->nbr_y, p_);" >>.odexp/model.c
echo "        for(j=0;j<p_->nbr_y;j++)" >>.odexp/model.c
echo "        {" >>.odexp/model.c
echo "            p_->y[j] = *(y+i*p_->nbr_y);" >>.odexp/model.c
echo "        }" >>.odexp/model.c
echo "        i++;" >>.odexp/model.c
echo "        p_ = p_->nextel;" >>.odexp/model.c
echo "    }" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "    return GSL_SUCCESS;" >>.odexp/model.c
echo "}" >>.odexp/model.c
echo "" >>.odexp/model.c
# END POP_INIT_CONDITIONS
# ====================================================================================

# ====================================================================================
echo "/* this is the right-hand side of ODE system dy/dt = f(y,mu) for a single node */" >>.odexp/model.c
echo "int ode_rhs(double t, const double y_[], double f_[], void *params_)" >>.odexp/model.c
echo "{" >>.odexp/model.c
echo "    par *mu_ = (par *)params_;" >>.odexp/model.c
echo "    double * pars_ __attribute__((unused)) = mu_->pars;" >>.odexp/model.c
echo "    double * aux_  __attribute__((unused)) = mu_->aux;" >>.odexp/model.c
echo "    double * expr_ __attribute__((unused)) = mu_->expr;" >>.odexp/model.c
echo "    double * psi_  __attribute__((unused)) = mu_->psi;" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "/*==== CHANGES CAN BE MADE BELOW ====*/" >>.odexp/model.c
echo "" >>.odexp/model.c
# ====================================================================================

# ====================================================================================
# ITERATORS
# find iterators in the source file and declare them 
# find all unique iterators
echo "    /* iterators */" >>.odexp/model.c
declare_iterators
echo "    long ii_ __attribute__((unused));" >>.odexp/model.c
echo "" >>.odexp/model.c
# ====================================================================================

# ====================================================================================
# DECLARE AND DEFINE PARAMETERS
# Parameters cannot be vectors

echo "" >>.odexp/model.c
echo "    /* parameters */" >>.odexp/model.c
declare_parameters
echo "" >>.odexp/model.c
# ====================================================================================

# ====================================================================================
# DECLARE AND DEFINE PARAMETERS 
# system_defines
# ====================================================================================

# ====================================================================================
# DECLARE PARAMETRIC EXPRESSIONS AND DEFINE NONVECTOR PARAMETRIC EXPRESSIONS
echo "    /* parametric expressions */" >>.odexp/model.c
declare_parametric_expressions
echo "" >>.odexp/model.c  
# ====================================================================================

# ====================================================================================
# DECLARE MEAN FIELDS 
echo "    /* mean fields */" >>.odexp/model.c
declare_mean_fields
echo "" >>.odexp/model.c
# ====================================================================================

# ====================================================================================
# DECLARE VARIABLES and AUXILIARY VARIABLES
echo "    /* Declaration - auxiliary functions */" >>.odexp/model.c
# find vector variables and declare them to model.c
declare_auxiliary_functions
echo "" >>.odexp/model.c  

echo "" >>.odexp/model.c
echo "    /* Declaration - variables */" >>.odexp/model.c
declare_variables
# ====================================================================================

# ====================================================================================
# DEFINE PARAMETRIC EXPRESSIONS
echo "" >>.odexp/model.c
echo "    /* Initialization - parametric expressions */" >>.odexp/model.c
# initialize parametric expression vectors and write them in .odexp/model.c
define_parametric_expressions_from_expr_pointer 
# ====================================================================================

# ====================================================================================
# DEFINE DYNAMICAL VARIABLES
echo "" >>.odexp/model.c
echo "    /* Initialization - variables */" >>.odexp/model.c
define_variables

# DEFINE MEAN FIELDS 
echo "" >>.odexp/model.c
echo "    /* Initialization - mean fields */" >>.odexp/model.c
# initialize auxiliary function 
define_mean_fields

# DEFINE AUXILIARY FUNCTIONS
echo "" >>.odexp/model.c
echo "    /* Initialization - auxiliary functions */" >>.odexp/model.c
# initialize auxiliary function 
define_auxiliary_functions

# DEFINE EQUATIONS 
echo "" >>.odexp/model.c
echo "    /* Initialization - equations */" >>.odexp/model.c
define_equations

# DEFINE aux_pointer 
echo "" >>.odexp/model.c
echo "    /* initialization - aux_pointer */" >>.odexp/model.c
define_aux_pointer

# DEFINE parametric_expression_pointer 
# echo "" >>.odexp/model.c
# echo "    /* initialization - expr_pointer */" >>.odexp/model.c
# define_parametric_expression_pointer

# ====================================================================================
# construct initial conditions

echo "" >>.odexp/model.c
echo "/*==== CHANGES CAN BE MADE ABOVE ====*/" >>.odexp/model.c
echo "" >>.odexp/model.c
echo "    return GSL_SUCCESS;" >>.odexp/model.c
echo "}" >>.odexp/model.c
echo "" >>.odexp/model.c

# =================================================================================
# ODE_INIT_CONDITIONS
# =================================================================================
# function ode_init_conditions
echo "int ode_init_conditions(const double t, double y_[], void *params_)" >>.odexp/model.c
echo "{" >>.odexp/model.c
echo "    par *mu_ = (par *)params_;" >>.odexp/model.c
echo "    double * pars_ __attribute__((unused)) = mu_->pars;" >>.odexp/model.c
echo "    double * aux_  __attribute__((unused)) = mu_->aux;" >>.odexp/model.c
echo "    double * expr_ __attribute__((unused)) = mu_->expr;" >>.odexp/model.c
echo "    int success_ = 0;" >>.odexp/model.c
# ITERATORS
# find iterators in the source file and declare them 
echo "    /* iterators */" >>.odexp/model.c
declare_iterators
echo "    long ii_ __attribute__((unused));" >>.odexp/model.c
echo "" >>.odexp/model.c

# ====================================================================================
# DECLARE AND DEFINE PARAMETERS
# Parameters cannot be vectors
echo "" >>.odexp/model.c
echo "    /* parameters */" >>.odexp/model.c
# find variable parameters and declare them in model.c 
declare_parameters_ic
# ====================================================================================

# ====================================================================================
# DECLARE PARAMETRIC EXPRESSIONS AND DEFINE NONVECTOR PARAMETRIC EXPRESSIONS
echo "    /* parametric expressions */" >>.odexp/model.c
declare_parametric_expressions
# ====================================================================================

# ====================================================================================
# DEFINE PARAMETRIC EXPRESSIONS
echo "" >>.odexp/model.c
echo "    /* Initialization - parametric expressions */" >>.odexp/model.c
define_parametric_expressions

# DEFINE parametric_expression_pointer 
echo "" >>.odexp/model.c
echo "    /* initialization - expr_pointer */" >>.odexp/model.c
define_parametric_expression_pointer

echo "" >>.odexp/model.c
echo "    /* Initialization - initial condition */" >>.odexp/model.c
define_initial_conditions

echo "    " >>.odexp/model.c
echo "    success_ = 1;" >>.odexp/model.c
echo "    return success_;" >>.odexp/model.c
echo "}" >>.odexp/model.c
# END ode_init_conditions =================================================================================


cp "$ODEXPDIR"/help.txt .odexp/
cp "$ODEXPDIR"/.inputrc .odexp/



echo "CFLAGS= -I$ODEXPDIR -Wall -g `pkg-config --cflags gsl` -pedantic" >.odexp/makefile
echo "LDFLAGS=-g `pkg-config --libs gsl` -lm -L$ODEXPDIR -lodexp" >>.odexp/makefile
echo "" >>.odexp/makefile
echo "all: model.out " >>.odexp/makefile
echo "" >>.odexp/makefile
echo "model.out: model.o " >>.odexp/makefile
echo "		gcc -o model.out \$(LDFLAGS) model.o " >>.odexp/makefile
echo "" >>.odexp/makefile
echo "model.o: model.c " >>.odexp/makefile
echo "		gcc -c -o model.o \$(CFLAGS) model.c " >>.odexp/makefile
echo "" >>.odexp/makefile
echo "" >>.odexp/makefile
echo "clean:" >>.odexp/makefile
echo "		rm -f *.o" >>.odexp/makefile
echo "" >>.odexp/makefile
echo "veryclean:" >>.odexp/makefile
echo "		rm -f *.o; rm -f *.out; rm -rf *.out.dSYM" >>.odexp/makefile

cd .odexp

# rm model.op

make && cp model.out .. && cd .. && ./model.out $1



