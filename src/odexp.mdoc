.\" 
.Dd $Mdocdate$ 
.Dt ODEXP 1 
.Os DARWIN16
.Sh NAME
.Nm odexp
.Nd numerical solver for population-based system with gnuplot graphical output
.Sh SYNOPSIS
.Nm odexp
.Op Fl a Ar additional odexp options
.Op Fl i 
.Op Fl o Ar compiler options 
.Op Fl p Ar parfile
.Op Fl q 
.Ar file
.Sh DESCRIPTION
.Nm odexp 
is an interactive command line program for numerical simulations and analysis of dynamical systems of particle populations.
Particles are defined by a system of ordinary differential equations (ODE), stochastic differential equations (SDE),
delay differential equations (DDE), of finite-difference equations (FDE). 
Particles can die and replicate. 
.Pp
.Nm odexp
parses and compiles the dynamical system defined in 
.Ar file ,
and launches a command line tool
to explore its dynamics. See EXAMPLES for examples of a dyamical system file.
If file is not given, 
.Nm odexp
will take the dynamical system from the standard input.
When option 
.Fl o 
is present, system parameters, initial conditions and options are loaded from file 
.Ar parameterfile
. 
.Pp
.Nm odexp
uses the 
.Em GNU Scientific Library (GSL) 
for numerical integration of ODEs and DDEs and their
linear stability analysis. 
Solutions are plotted with 
.Em gnuplot .
.
.Sh OPTIONS
.Bl -tag -width indent
.It Fl a Ar options
Add options to odexp. 
.Ar options
comes as 'option1=value1, option2=value2, ...'
.It Fl o Ar options 
Add 
.Ar option
to the compiler command. Default 'g' for debugging.
.It Fl i 
Ignore syntax errors try to parse the file anyway.
.It Fl p Ar parfile
Optional parameter file. This overrides parameters, timespan and options in the source file.
.It Fl q
Quiet mode. Quit after the first run and leave simulation files in place.
.El
.
.Sh USAGE 
.Ss File structure
The
.Nm 
file defines an initial value problem (IVP): equations, initial conditions, parameter, auxiliary functions, integration interval, etc. Essential elements are at least one equation, the initial condition and the time span over which integration must take place. Other elements such as options, auxiliary functions and constants 
can be defined as well.
The general structure of the file is
.Bl -bullet -compact
.It
Description of the dynamical system. Lines start with ##. Comments start with # and run until the end of the line.
.It
Model parameters. Lines start with PAR
.It 
Parametric expressions. Lines start with EXPR
.It 
Auxiliary functions (AUX)
.It 
Equations (D/DT)
.It 
Mean fields (%M)
.It 
Coupling terms (%C)
.It 
User-defined functions (FUN)
.It 
Timespan (TIMES)
.It 
Options (OPT)
.El
.
.Ss Interactive commands
Interactive commands can be entered at the 
.Nm odexp
command prompt. Successive commands can be separated with by semi-colons ';' 
.Bl -tag -width indent
.It Ic "?"              
Display this help.
.It Ic C^y 
Repeat last command.
.It Ic +, =, C^g 
Increment current parameter by a multiplicative factor 
.Ar parstep 
.Ar ( parstep
is an option, see 
.Ic set 
options).
.It Ic -, C^h
Decrement current parameter by a multiplicative factor 
.Ar step 
.Ar ( step
is an option, see 
.Ic set 
options).
.It Ic ], C^]    
Plot next variable of current particle on the y-axis (cyclic).
.It Ic [, C^[ 
Plot previous variable of current particle on the y-axis (cyclic).
.It Ic }, C^}
Plot next particle of current variable on the y-axis (cyclic).
.It Ic {, C^{
Plot previous particle of current variable on the y-axis (cyclic).
.It Ic > Ar count
Double 
.Ar count
times (default one) the number of output time steps. 
.It Ic < Ar count
Halve 
.Ar count
times (default one) the number of output time steps.
.It Ic # Ar dataset Ar colx Ar coly 
Add to plot 
.Va colx
and 
.Va coly
from 
.Va dataset .
.
.It Ic $ Ar id   
Print dataset for particle 
.Va id .
. 
If 
.Va id
is missing, print stats dataset 
in population mode or particle in single mode.
.It Ic $$, $a, $., $_    
Print all particles in tall format, using 
.Ic less
.It Ic * Op Ar msg         
Snapshot of current simulation and parameter values with optional 
.Va msg .
and save the current plot to 
in format given by option
.Va printsettings
(default postscript eps color).
The filenames are made from the first word of 
.Va msg 
or the current model filename if 
.Va msg 
is absent.
.
.It Ic ! Ar command
Pass the argument
.Ar command 
to the shell.
.It Ic 0, n 
Switch to/update normal plot. 
.It Ic 9, b
Switch to continuation plot.
.It Ic 7 Op Ar timestep | Op Ar first | last | previous | next  Op Ar skip 
Switch to particle plot. Optional 
.Ar timestep 
sets the timestep to plot. Options 
.Ar first 
and
.Ar last
set timesteps to 0 and the last one. Options
.Ar previous 
and
.Ar next 
set the timestep to previous or next one. With option 
.Ar skip ,
.Ar previous 
and
.Ar next 
jump 
.Ar skip 
steps
.It Ic 6 
Switch to animate lot.
.It Ic A 
Reset all axes to linear scale.
.It Ic a Ar us , a Ar su
Set axis 
.Va u
={x|y|a} to scale 
.Va s
={l|n}, n for linear (normal) scale and l for log scale, 
.Va a
for all axes.
.It Ic d              
Reload the parameter file (usually to reset model parameters to their default values). 
.It Ic E
Decrease the time span by a factor 2.
.It Ic e Op Ar val
Multiply the time span by a factor
.Va val  
(default 
.Va val 
= 2). Factor 
.Va val 
can be less than one.
.It Ic f       
Fit data (not implemented yet).
.It Ic g Ar cmd        
Send the command 
.Va cmd
to gnuplot.
.It Ic h Op d            
Toggle plot hold (on/off). The command 
.Ic hd
delays hold to after the next plotting command, making sure that only plotting command issued after the hold command will be displayed.
.It Ic I              
Set initial conditions to their default values.
.It Ic il            
Use the state of the system at 
.Ar t1 
(tfinal) as initial conditions.
.It Ic in            
Loop through initial conditions for each variable. 
Set to I to revert to the default value, press 
.Aq enter 
to keep current initial condition.
.It Ic is
Set initial condition to steady state. 
Steady state must have been computed with 
.Ic ms .
.It Ic l@            
List all user-defined functions.
.It Ic l%            
List population birth, replication and death rates.
.It Ic lc            
List all constant arrays.
.It Ic ld            
Print file description (all lines starting with ## in 
.Ar file 
).
.It Ic lf            
List all array files (nrows ncols and filenames).
.It Ic li            
List all initial conditions. 
.It Ic ll          
List file name and various information.
.It Ic lo Op Ar optiontype         
List options that match 
.Va optiontype , 
or all options if 
.Va optiontype
is missing.
.It Ic lp            
List all parameters. 
.It Ic ls            
List steady states.
.It Ic lx Op DACME    
List all equations, auxiliary variables, coupling terms, mean fields and parametric expression. Optional subset of DACME to list only those types. 
.It Ic mm            
Try to find all steady states.
.It Ic ms            
Find a steady state with starting guess given by initial conditions.
.It Ic o Ar filename  
Load parameters values and options from file 
.Va filename .
.
.It Ic P Ar val        
Set current parameter to value 
.Va val .
.
.It Ic p Oo Ar ind | Ar par Oc Op Ar val      
Make parameter with index 
.Va ind
or name 
.Va par
the current parameter, and set its value to 
.Va val .
When 
.Va val 
is missing, the parameter value is unchanged.
When 
.Ar ind 
and
.Ar par
are missing, the current parameter and its value are printed. 
.It Ic Q, q Oo Ar msg Oc , Ic C^w        
Quit and make a snapshot of the parameters. An optional message 
.Va msg
can be added. 
.It Ic R
Rerun the ODE system and update plot. Useful after numerical options have been changed. 
.It Ic r
Repeat the last gnuplot command (this is gnuplot's 
.Ic replot ) .
.It Ic si { Ar ind | Ar var } Ar val   
Set value of initial condition of variable with index 
.Va i
or name 
.Va var
to 
.Va val .
.It Ic sI Ar ind         
Revert variable 
.Va ind
to expression.
.It Ic sl            
Change to last initial conditions, same as 
.Ic il  
but do not run simulation.
.It Ic so, set Ar ind | Ar var Ar val   
Set the option with index 
.Va ind
or name 
.Va var
to value 
.Va val .
.It Ic st Ar ti Ar  val   
Set value of timepoint
.Va ti
to 
.I val 
(
.Va ti
= 0 for initial time or 1 for final time). 
.It Ic t Oo Ar t0 Oc Ar t1 
Set time span from 
.Ar t0
to 
.Ar t1 .
The final time 
.Ar t1
must be larger than 
.Ar t0 .
.It Ic u              
Toggle add curves to plot (on/off).
This works only when simulations are updated, for instance when parameters are changed. To plot many variables on the same axes, use 
.Ic h 
(hold) instead. Curves can be labelled with custom keys, by adding a string
.Ar "key"
to the plot command.
.It Ic ur              
Remove all curves and set curves off.
.It Ic v { Ar i | Ar x } { Ar j | Ar y } Op { Ar k | Ar z }      
Set 2D/3D view, x-axis to index 
.Va i
(variable 
.Va x
), y-axis to 
.Va j
(variable 
.Va y
), 
and z-axis to 
.Va k
(variable 
.Va z
). 
Set variable to T or index -1 for time.
.Ic 2 
takes only the first two arguments, and 
.Ic 3 
takes the three arguments
.It Ic V Ar gnuplot-expression 
Plot according to
.Ar gnuplot-expression. 
The format @var can be used in place of the corresponding column number. For arrays, the subscripted variable array[i] is named array_i. 
For example, if x[0],... x[9] are dynamical variables, then 
.Ic V Ar (@x_2):(@x_3/@x_4) 
would plot the ratio x[3]/x[4] vs x[2]
.It Ic w 
List all particle states 
.It Ic x { Ar ind | Ar var }
Plot variable with index 
.Va ind
or name 
.Va var
on the x-axis
.It Ic y Op Ar ind | var "key" 
Plot variable with index 
.Va ind
or name 
.Va var
on the y-axis
.El
.
.Ss Dyamical system keywords
A dynamical system is specified in a text file with lines starting with keywords for defining equations, parameters, options, etc. Keywords are case-insensitive. 
.Pp 
Overview of keywords
.Bl -tag -width %prolif
.It PAR
Model parameter. Must be a numerical constant.
.It EXPR
Parametric expression. Must be an expression, and can depend on model parameters and other 
parametric expressions.
.It AUX 
Auxiliary function. Must be an expression, and can depend on model parameters, parametric expression and
other auxilary functions and dynamical variables.
.It D/DT
Differential equations for the dynamical variables. Must be an expression, and can depend on model parameters, parametric expressions, auxilary functions and dynamical variables.
.It INIT 
Initial conditions for the dynamical variables. 
.It CONST
Constant arrays.
.It LET
Prescan macro. 
.It FILE
Array from file 
.It FUN
User-defined function
.It TIMES
time span
.It OPT
Numerical and graphical options.
.It %BIRTH
particle birth rate.
.It %PROLIF
particle proliferation rate.
.It %DEATH
particle death rate.
.It %M 
Mean field (average of expression over all particles)
.It %C 
Coupling (for each particle, average of expression over all particles)
.El
.Pp
.Bl -ohang
.It Ic PAR
Parameters. Must be numerical scalar (double, int or long). Syntax:
.Pp
.D1 PAR Va name Ar value Op { Ar attribute , ...} # Ar comment 
.Pp
Parameters appear in the list of parameters. 
They can be modified from within 
.Nm odexp 
and can be ranged over. 
Parameters are common to all particles.
.Pp
The variable 
.Va name
must be a valid C variable name. 
.Pp
The 
.Va value
must be a constant number; by default a double, but can be 
casted to an integer by declaring an attribute 
.Va int
or 
.Va long .
.D1 PAR n 3 {int} # n is declared as an int in the parsed C model file
.Pp
.Em Shortcuts for parameter declaration
Parameters can be declared in name value pairs on a single line, 
separated by semi-colons ';', or one parameter value pair per line.
The prefix PAR is optional when one parameter is declare per single line.
.Pp
These examples are valid  
.Bd -literal
PAR a 0.1; Va b 0.2
a 0.1 # ok
PAR a {attribute of a} # comment on a; b {attribute of b} # comment on b
PAR b 0.2 {init}   # attribute init   for parameters only used 
PAR c 0.3 {impl}   # attribute impl   for parameters used implicitly, 
PAR d 0.4 {every}  # attribute every  for parameters used in expressions, 
                   # initial conditions and auxiliary equations
PAR a 1 {int} # type integer. Warning this comment ends at the semi-colon: b is another parameter!; b 2.3 
.Ed
.Pp
These examples are not valid
.Bd -literal
a 0.1; b 0.2 # not ok
.Ed
.Pp
.Em Implicit initial condition 
.Pp
If 
.Va var
is a dynamical variable, the declaration 
.Pp
.D1 PAR var_0 0.5 
.Pp
declares the parameter 
.Va var_0 ,
sets it to value 0.5 and implicitly declares the initial condition INIT 
.Va var var_0 .
.Pp
Optional attributes for auxiliary variables are 
.Ar init[ial] 
if the parameter occurs in the initial conditions or parametric expression but not in the dynamical equations,
.Ar impl[icit]
if the parameter is only accessed through 
.Fn MU var  
in population rates, or in user-defined functions. Attribute 
.Ar impl 
can also be used for parameters that are unused, to prevent warning from the C compiler.
The attribute 
.Ar ever 
is used if the parameter occurs in the initial conditions and in the dynamical equations.
Attributes 
.Ar int
and 
.Ar long
are used to cast parameters as integers. They are still stored as doubles.
.It Ic EXPR
Expressions are functions of parameters. They cannot be modified interactively. 
Syntax:
.Pp
.D1 EXPR Va name Ar expression Op { Ar attribute , ...}  # Ar comment 
.Pp
Expressions are unique to each particle. They are evaluated at the birth of a particle and are constant
for the lifetime of the particle. Use 
.Va ATBIRTH
and 
.Va ATREPLI
to specify particle-dependent expressions. 
.Pp
Examples 
.Bd -literal
PAR a 0.1
EXPR c a*a
EXPR rand_array[i=0:5] -1 + 2*rand01[i]
EXPR is_ancestor ATBIRTH*1 + ATREPLI*0
.Ed
.Pp
Optional attributes for expression are 
.Ar vect 
for evaluating the rhs outside a loop. This is useful for arrays that are filled by a function
.Bd -literal
EXPR arr[i=0:5] myfunc(arr) {vect} 
.Ed
.It Ic AUX 
Auxiliary variables. Auxiliary variables depend on parameters, expressions and dynamical variables. 
Syntax:
.Pp
.D1 AUX Va name Va expression Op {.Va attribute ; ...} ] [ # .Va comment ] 
.Pp
They are declared as Name Expression pairs, and must be scalars or one-dimensional arrays.
Auxiliary variables are useful to monitor quantities that depend on the dynamical variables. They can be 
plotted, and their values are recorded in the output file current.tab. 
Auxiliary functions are particle-dependent. They are evaluated at each time step.
.Bd -literal
AUX d sqrt(x+c)
AUX a[i=0:5] X[i]*X[i]
AUX norm_x sqrt(sum(a,5))
AUX norm_x2 dotprod(X,X,5)
.Ed
.Pp
Optional attributes for auxiliary variables are 
.Ar vect 
for evaluating the rhs outside a loop. This is useful for arrays that are filled by a function
.Bd -literal
AUX arr[i=0:5] myfunc(arr) {vect} 
.Ed
.It Ic D/DT
Dynamical variables. Dynamical variables are the dependent variables of the ODE system.
Syntax:
.Pp
.D1 Pf d Va var /dt = Ar rhs Oo { Ar attribute ; ... } Oc Op  # Ar comment 
.Pp
Dynamical variable 
.Va var
is declared as d
.Va name
/dt followed by = and the 
.Va rhs
of the equation. Example
.Pp
.D1 dx/dt = -a*x
.Pp
Optional attributes for dynamical variables are 
.Ar hidden  
to hide the variable from being listed,
.Ar tag 
= 
.Va tag
for giving a name to the variable
.Ar init 
= 
.Va value
for setting the initial condition.
.It Ic INIT 
Initial conditions. 
Syntax:
.Pp
.D1 INIT Va var Va expression Oo { Ar attribute ; ... } Oc Op  # Ar comment 
.Pp
Initial conditions can be numerical, or can be expression that depend on parameters or expressions.
For each equation D/DT, there must be an INIT with the corresponding 
.Va name
. 
If initial conditions are expressions, their values can be overruled or reset in odexp.
.Bd -literal
INIT x 1.0
INIT x b 
.Ed
.Pp
Optional attributes for dynamical variables are 
.Ar tag 
= 
.Va tag
for giving a name to the variable
.It Ic OPT
Options. Options can be preset. 
.Bd -literal
OPT x x1         # set x-axis to plot x1
OPT reltol 1e-3  # set ode solver reltol to 1e-3
.Ed
.It Ic TIMES
Timespan. Time span is an array of the form t0 ti ... t1 where t0 and t1 are the initial and final times. 
Intermediate values ti are stopping time, where the system is reset to initial condition. This is useful when systems
are discontinuous, and variable need to be reset at known timepoints.
.Bd -literal
TIMES 0 10
TIMES 0 10 20 50 100
.Ed
.It Ic LET
Set predefined constant. Useful to define system size.
.Bd -literal
LET N 100
.Ed
.It Ic CONST
Constant array. Must be numerical array. Constant arrays cannot be modified.
Constant arrays can be of any dimensions. Useful for arrays of small sizes. 
.Bd -literal
CONST MY_ARRAY[2][3] { {1.1, 1.2, 1.3}, {2.1, 2.2, 2.3} }
.Ed
.It Ic FILE
Constant array from file. Syntax:
.Pp
.D1 FILE Va varname Ar filename { Ar nrow, Ar ncol, Ar sep }
.Pp
where 
.Va nrow
.Va ncol
are the optional numbers of rows and column to scan from 
.Va filename .
.Va filename
is a text file containing a Ar sep delimited array of doubles. Example
.Bd -literal
FILE my_array  my_datafile.cav { nrow = 13, ncol = 2, sep = "," }
.Ed
.Pp
will load the first 13 rows and first 2 columns of a comma-separated of the file 
.Ar my_datafile.csv .
.Pp
.It Ic FUN
User-defined function. Simple, one-line functions can be defined this way
.Bd -literal
FUN my_fun_name (x, y, z) = x*x+y+z 
.Ed
.Pp
This is interpreted in C as 
.Pp
.Bd -literal
double my_fun_name(double x,double y, double z) = { return x*x+y+z; } 
.Ed
.Pp
Array can be passed as pointers,
.Bd -literal
FUN mean(*x) = sum(x,LENTGH_X)/LENTGH_X 
.Ed
.Pp
is interpreted in C as 
.Pp
.Bd
.Ft double 
.Fo mean 
.Fa "double *x" 
.Fc 
{ return sum(x,LENTGH_X)/LENTGH_X; }
.Ed
.Pp
More complex function can be defined on multiple lines. Definition is terminated by the keyword 'end'.
.Bd -literal
FUN myatan( x, *p)
  double a = *p;
  return atan(a*x);
end
.Ed
.Pp
is interpreted as 
.Bd -literal
.Fn "double myatan" "double x" "double *p"
{
  double a = *p;
  return atan(a*x);
}
.Ed
.Pp
The function 
.Fn sum
is a helper function (see below for a list of helper functions). 
.El
.
.SS Population-specific keywords (%)
.Bl -ohang
.It Ic %BIRTH 
Particle (de novo) birth rate. Examples
.Bd -literal
%BIRTH 0.1 # set birth rate to 0.1 per unit time 
%BIRTH 1.0/(10 + POP_SIZE) # birth rate function on total particle number POP_SIZE
.Ed
.It Ic %DEATH 
Particle death rate. Examples
.Bd -literal
%DEATH 0.01 # constant particle death rate 
%DEATH death_rate # set death rate to death_rate
.Ed
.It Ic %REPLI
Particle replication rate. 
.It Ic %C
Coupling term. 
This is of the form 
.Pp
.Dl PSI[i] = 1/POP_SIZE*sum_{j=1}^POP_SIZE Fn phi "x[j]" "x[i]", 
.Pp
where 
.Fn phi
is a function of two variables. The declaration is
.Pp
.Dl %C PSI phi (OY(x),MY(x))  
.Pp 
The coupling term PSI takes a value for each particle.
.It Ic %M
Mean field. 
This is of the form 
.Pp
.Dl MF = 1/POP_SIZE * sum_{j=1}^POP_SIZE Fn phi "x[j]", 
.Pp
where 
.Va phi
depends only on one variable. Example,
.Pp
.Dl %M MF phi(MY(x)) # average phi(my dynamical variable x) over all particles
.Pp
Since mean fields are averaged over the total particle number POP_SIZE, to get the total particle number, use
.Pp
.Dl %M TOTAL POP_SIZE # not numerically efficient but ok
.Pp
Alternatively, a mean field can be computed without looping through all particles, by using the attribute vect
.Pp
.Dl %M TOTAL POP_SIZE {vect} # no loop, faster
.Pp
.
.Ss Macros
.Bl -tag
.It Dv DWDT
Gaussian, uncorrelated white noise ~ N(0,1/h), with h the timestep, as the derivative of the Wiener process. 
The stochastic differential equation 
.Pp
.D1 dx/dt = -theta(x - mu)*x + sigma*DWDT
.Pp
would have as a solution x(t) the Ornstein-Uhlenbeck process, centered at mu, with sigma a diffusion constant and theta a dissipation rate constant.
.It Dv POP_SIZE
Total number of particles. 
.It Fn MU par
Used anywhere to access the value of parameter with name 
.Va par .
.It Fn OY var , Fn OE var , Fn OA var
Used in %C to iterate over all particles; 
.I var 
is a dynamical variable (OY), expression (OE) or auxiliary variable (OA).
.It Fn MY  var, Fn ME var , Fn MA var , Fn MF var
Used in %C and %M to denote the current particle; 
.Va var
is a dynamical variable (MY), expression (ME), or auxiliary variable (MA) or a mean field (MF).
.It Fn SY var , Fn SE var, Fn SA var
Value of the current particle 
.Va var Ap
s sister.  Useful to specify what happens when particle replicates; 
.Va var
is a dynamical variable (SY), expression (SE) or auxiliary variable (SA).
.It Dv ATBIRTH 
logical variable indicating that the particle is just born (i.e. has no parent).
.It Dv ATREPLI 
logical variable indicating that the particle is replicating.
.It Dv ISDAUGHTER 
logical variable indicating if the particle is the daughter. 
This is nonzero only at replication (ATREPLI = 1). 
The daughter particle is the newly formed particle. 
At replication, the daughter particle is created from the mother particle by copy. 
Then, the mother particle is updated and becomes the sister particle. 
The daughter is then updated, and can refer to the sister particle with SE and SY.
.It Dv ISMOTHER 
logical variable indicating if the particle is the mother. 
This is nonzero only at replication (ATREPLI = 1).
.It Dv MID 
Current particle ID. ID's are unique and indicate the order of creation of the particle. ID's are not recycled. 
.El
.
.Ss Numerical and graphical options
.Pp
See the list of options with line command 
.Ic lo .
.
.Ss Functions acting on arrays
.Bl -tag 
.It Fn "sum" "double *array" "long len"
Sum the elements of the array 
.Va array
of length 
.Va len .
Return the sum of the array.
.It Fn "sumstep" double *array" "long len" "long step"
Sum only the 
.Va step
'th elements of the array 
.Va array
of length 
.Va len .
.It Fn "prod" "double *array" "long len" 
Product of the elements of the array 
.Va array
of length 
.Va len .
.It Fn "dotprod" "double *x" "double *y" "long len"
Scalar product of two arrays 
.Va x
and 
.Va y
of lengths 
.Va len
. Returns the scalar product.
.It Fn "conv" "double *u" "double *v" "long len"
convolution product between arrays 
.Va u
and 
.Va v
, each of length 
.Va len
. Returns the convolution product.
.It Fn "minus" "double x" "double y"
Subtraction. 
Used with 
.Ic sumxy .
.It Fn "plus" "double x" "double y"
Addition.
Used with 
.Ic sumxy .
.It Fn "sumxy" "long len" "double (*f)(double)" "double (*g)(double,double)" "const double *x" "const double yi"
Sum over j of f(g(x[j], yi)). 
.It Fn "kern" "double *Wi" "double (*f)(double, double, double *)" "double xi" "const double *x" "double *p" "long len"
.It Fn "linchaindelay" "double root" "double *chain" "size_t link" "double delay" "size_t len"
This returns the 
.Va link AP
th element of a linear chain 
.Pp
.Dl beta*(chain[link-1] - chain[link]),
.Pp 
if link > 0, and
.Pp
.Dl beta*(root - chain [0])
.Pp
if link = 0.
.El
.
.Ss Time lags (gamma-distributed delays)
.Pp
There is a shortcut to specify a delayed variable. 
If 
.Va z 
is a dynamical variable, then
.Pp
.D1 LAG ztau1 {root = z, mean = tau, len = 1000, init = 0.2}
.Pp
defines the dynamical variable 
.Va ztau1
as the delayed version of 
.Va z
with a linear chain of length 1000 and mean tau.
All intermediate variables, including 
.Va ztau1 , 
have initial condition 0.2.
.
.Ss Low rank expansion of coupling terms in O(N) (not in population mode)
.Pp
Coupling term (%C) are evaluated by default in O(N^2) where N is the system size. 
When the right-hand side is equal to 
.Ic lrexp
in a coupling declaration, an adaptative low rank expansion  
is used to approximate the coupling function g given in the attribute 
.Va fun
over the variable given
in attribute 
.Va var . 
.Pp
The coupling function g must be of the form g(u, *p) = gg(s*u) where the pointer p points to the scalar value s. 
.Pp
The following code calls the expansion method for the coupling term sin(xj-xi).
(The auxiliary term TH is introduced to force the values of theta between 0 and 2 * PI.)
.Bd -literal
%C coupling lrexp {var = TH, fun = cpling_fun}
AUX TH theta - ( (int) (theta/2/PI) * 2 * PI )
fun cpling_fun(x, *p) 
  double scale = *(double *)p; 
  x *= scale; 
  return sin(x); 
end
.Ed
.Pp
For more complex low-rank expansion, use
.Ic lrwkern , 
on the right-hand side.  
.Ic lrwexp 
uses a matrix W = U*V as weights in the coupling term:
.Pp
.D1 y = sum_j W_ij g(x_j - x_i) 
.Pp
For the low-rank expansion method to work, the matrix W must be itself low-rank, and admit 
a decomposition U*V. If N is the total system size, 
and R is the rank of W, U (NxR) and V (RxN) are rectangular matrices. 
The syntax is
.Pp
.D1 %C cpl lrwexp {fun = g, U = U[0], V = V[0], rank = R, var = x }
.Pp 
The term 
.Va cpl 
is the a vector of size N, and U[0] and V[0] are pointers to the first rows of U and V.
.
.Ss Stepping methods
.Bl -hang -width indent
.It rk2 
GSL Explicit embedded Runge-Kutta (2, 3) method 
.It rk4 
GSL Explicit 4th order (classical) Runge-Kutta 
.It rkf45
GSL Explicit embedded Runge-Kutta-Fehlberg (4, 5) method.
.It rkck 
GSL Explicit embedded Runge-Kutta Cash-Karp (4, 5) method. 
.It rk8pd 
GSL Explicit embedded Runge-Kutta Prince-Dormand (8, 9) method.
.It bsimp 
GSL Implicit Bulirsch-Stoer method of Bader and Deuflhard.
.It fe 
Explicit Forward Euler with fixed time steps. Combined the macro DWDT, this is the Euler-Maruyama scheme.
.It iteration 
Not an ODE stepper. The stepper assigns the RHS of the equation to the updated state variable.
.El
.
.Sh OUTPUT
.Pp
There are two primary output files: 
.Ar traj.dat 
and
.Ar stats.dat .
The file 
.Ar stats.dat 
stores at each time step the following information
.Pp
.D1 TIME MFs N EVENTs 
.Pp
where 
.Ar TIME 
is the time (double),
.Ar MFs
are all the mean fields (double),
.N
is the number of particles (int).
.Ar EVENTs 
have three int columns describing birth/death/replication events: 
.Ar PARENT_ID, EVENT, CHILD_ID .
.Ar EVENT 
is 1 if birth or replication, -1 if death, and 0 if no event occurred (a fixed output time steps) 
.Ar PARENT_ID 
is the ID of particle that dies or replicate, -1 if
.Ar EVENT 
is a birth, and 0 if no event occurred.
.Ar CHILD_ID 
is the ID of the newly created particle, if
.Ar EVENT 
= 1, -1 if a particle dies and 0 otherwise.
.Pp
The file 
.Ar traj.dat
lists at each time step all particles, and has columns
.Pp
.D1 STEP ID TIME DYN AUX CPL MF EXPR
.Pp
.
.Sh EXAMPLES
.Pp
Here is an example of an odexp file for the Lotka-Volterra equations.
.Bd -literal 
## file lotka.pop
## a simple nonlinear ODE system
#  all lines starting with ## are printed with the command ld
 
PAR a 0.2
PAR b 0.3
 
dx/dt = x*(y - a) # equation on x
dy/dt = y*(b - x) # equation on y
 
INIT x 0.1 # initial condition for x
INIT y 0.2 # initial condition for y
 
TIMESPAN 0 10 # timespan is 0 to 10

# end of file
.Ed
.Pp
To print the file current.plot formatted, use
.Pp
.Li hexdump -e '\(dq%f \(dq \(dq%f \(dq \(dq%f \(dq \(dq\en\(dq' current.plot
.
.Sh BUGS
.
.
