.TH ODEXP 1 "25/10/2018" "odexp" "odexp" 
.SH NAME
odexp \- fast ODE solver with gnuplot graphical output
.SH SYNOPSIS
.B "odexp "
[
.B \-o
.I parameterfile
] [
.I file
]
.SH DESCRIPTION
.B odexp 
is a command line program for numerical simulations and analysis of dynamical systems of particle populations.
Particles are defined by a system of ordinary differential equations (ODE), stochastic differential equations (SDE),
delay differential equations (DDE), of finite-difference equations (FDE). 
Particles can die and replicate. 

\fIodexp\fR parses and compiles the dynamical system defined in \fIfile\fR, and launches a command line tool
to explore its dynamics. See \fIEXAMPLES\fR for examples of a dyamical system file.
If \fIfile\fR is not given, \fIodexp\fR will take the dynamical system from the standard input.
When option \fB\-o\fR is present, system parameters, initial conditions and options are loaded from file \fIparameterfile\fR. 

\fIodexp\fR uses the \fIGNU Scientific Library\fR (GSL) for numerical integration of ODEs and DDEs and their
linear stability analysis. 
Solutions are plotted with \fIgnuplot\fR.

.SH OPTIONS

.sp 1
.TP 0.5i
.BR \-o
Optional parameter file.

.SH LINE COMMANDS 
Line commands can be entered at the \fIodexp\fR prompt. Multiple commands can be separated with && (does not
work when command expects a string argument).

.TP
.BR ?              
Display this help
.TP
.BR + ", " = ", " C^g 
Increment current parameter by a multiplicative factor \fBparstep\fR 
.TP 
.BR - ", " C^h
Decrement current parameter by a multiplicative factor \fBparstep\fR
.TP
.BR ] ", " C^]    
Plot next variable on the y-axis (cyclic)
.TP
.BR [ ", " C^[ 
Plot previous variable on the y-axis (cyclic)
.TP
.BR } ", " C^}
Plot next particle on the y-axis (cyclic)
.TP
.BR { ", " C^{
Plot previous particle on the y-axis (cyclic)
.TP
.BR >
Double the number of time steps 
.TP
.BR <
Halve the number of time steps 
.TP
.BR # " " \fIdataset\fR " " \fIcolx\fR  " " \fIcoly\fR 
Add to plot \fIcolx\fR and \fIcoly\fR from \fIdataset\fR
.TP
.BR ! " " \fIfilename\fR   
Save the current plot to \fIfilename\fR. EPS format
.TP
.BR $ " " \fIid\fR   
Print dataset for particle \fIid\fR, or print stats dataset if \fIid\fR is missing
.TP
.BR * " " \fR[\fImsg\fR]        
Snapshot of current simulation and parameter values with optional \fImsg\fR 
.TP
.BR 0 ", " n 
Switch to/update normal plot 
.TP
.BR 9 ", " b
Switch to continuation plot
.TP
.BR 8 ", " j
Switch to range plot
.TP
.BR A 
Reset all axes to linear scale 
.TP
.BR a\fIu\fR\fIs\fR ", " a\fIs\fR\fIu\fR
Set axis \fIu\fR={x|y} to scale \fIs\fR={l|n}, n for linear (normal) scale and l for log scale 
.TP
.BR d              
Reload the parameter file 
.TP
.BR E
Decrease the time span by a factor 2
.TP
.BR e
Increase the time span by a factor 2
.TP
.BR f       
Fit data (not implemented)
.TP
.BR g " " \fIcmd\fR        
Send the command \fIcmd\fR to gnuplot 
.TP
.BR h              
Toggle plot hold (on/off) 
.TP
.BR I              
Set initial conditions to previous 
.TP
.BR il            
Use the state of the system at t1 as initial conditions 
.TP 
.BR in            
Loop through initial conditions. 
Set to I to revert to expression, enter to keep current initial condition
.TP
.BR is            
Set initial condition to steady state. 
Steady state must have been computed with \fBms\fR
.TP
.BR l@            
List all user-defined functions 
.TP
.BR l%            
List population birth, replication and death rates 
.TP
.BR la            
List all auxiliary variables (can be plotted)
.TP 
.BR lc            
List all constant arrays
.TP
.BR ld            
Print file description (all lines starting with ##)  
.TP
.BR le            
List all parametric expressions
.TP 
.BR lf            
List all array files (nrows ncols filename)
.TP
.BR li            
List all variables with initial conditions 
.TP
.BR ll          
List file name and various information 
.TP
.BR lo " " [\fIoptiontype\fR]         
List options that match \fIoptiontype\fR, or all options if \fIoptiontype\fR is missing
.TP
.BR lp            
List all parameters 
.TP
.BR ls            
List steady states
.TP 
.BR lx            
List all equations and auxiliary variables 
.TP
.BR mm            
Try to find all steady states 
.TP
.BR mr 
Range over parameters. The active parameter takes values between r/par0 and r/par1 with 
multiplicative step r/mstep and additive stesp r/astep. For each value, the system is
integrated over tspan and the min and the max of each variable is stored in the file range.tab. 
If r/ric is 0, the initial conditions are set to the last state of the previous integration, 
otherwise, the initial conditions are set as usual
.TP
.BR ms            
Find a steady state with starting guess given by initial conditions 
.TP
.BR o " " \fIfilename\fR  
Load parameters values and options from file \fIfilename\fR 
.TP
.BR P " " \fIval\fR        
Set current parameter to \fIval\fR
.TP
.BR p " " \fR{\fIind\fR|\fIpar\fR} " " \fR[\fIval\fR]     
Make parameter with index \fIind\fr or name \fipar\fr the current parameter, and set its value to \fIval\fR 
When val is missing, the parameter value is unchanged
.TP
.BR Q ", " q " " \fR[\fImsg\fR]        
Quit and snap with optional message \fImsg\fR 
.TP
.BR R
Rerun the ODE system and update plot
.TP
.BR r
Repeat the last gnuplot command (replot)
.TP
.BR si " " \fI{\fIind\fR|\fIvar\fR} " " \fIval\fR   
Set value of initial condition of variable with index  \fIi\fR or name \fIvar\fR to \fIval\fR
.TP
.BR sI " " \fIind\fR         
Revert variable \fIind\fR to expression
.TP
.BR sl            
Change to last initial conditions, same as \fBil\fR
.TP
.BR so ", " set " " \fR{\fIind\fR|\fIvar\fR} " " \fIval\fR   
Set value of option with index \fIind\fR or name \fIvar\fR to \fIval\fR
.TP
.BR st " " \fIti\fR " " \fIval\fR   
Set value of \fIti\fR to v (\fIti\fR = 0 or 1) 
.TP
.BR t " " \fR[\fIt0\fR] " " \fIt1\fR
Set time span from \fIt0\fR to \fIt1\fR. 
By default t0 is not changed. 
Final time \fIt1\fR must be larger than \fIt0\fR.
.TP
.BR u              
Toggle add curves to plot (on/off) 
.TP
.BR ur              
Removes all added curves and set curves off.
.TP
.BR v ", " 2 ", " 3 " " \fR{\fIi\fR|\fIx\fR} " " \fR{\fIj\fR|\fIy\fR} " " \fR[{\fIk\fR|\fIz\fR}]      
Set 2D/3D view, x-axis to index \fIi\fR (variable \fIx\fR), y-axis to \fIj\fR (variable \fIy\fR), 
and z-axis to \fIk\fR (variable \fIz\fR). 
Set variable to T or index -1 for time.
\fB2\fR takes only the first two arguments, and the \fB3\fR takes the three arguments
.TP
.BR w 
List all particles 
.TP
.BR x " " \fR{\fIind\fR| \fIvar\fR}
Plot variable with index \fIind\fR or name \fIvar\fR on the x-axis
.TP
.BR y " " \fR{\fIind\fR|\fIvar\fR}
Plot variable with index \fIind\fR or name \fIvar\fR on the y-axis

.SH DYAMICAL SYSTEM DECLARATIONS
.TP
.BR PAR
Parameters. 
Must be numerical (double, int or long). 
Syntax:

.RS
PAR \fIname\fR \fIvalue\fR [ {\fIattributefR; ...} ] [ # \fIcomment\fR ] 
.RE

Parameters appear in the list of parameters. 
They can be modified from within odexp and can be ranged over. 
\fIname\fR must be a valid C variable name. 
\fIvalue\fR must be a constant number; by default a double, but can be 
an integer with attribute \fItype\fR = int or  \fItype\fR = long.
Parameters are declared in name value pairs, separated by commas  (,), or one parameter per line.
Parameters are common to all particles.
The prefix PAR is optional when one parameter is declare on a single line

Examples
.RS
.nf
PAR a 0.1, b 0.2

a 0.1 # ok
a 0.1, b 0.2 # not ok

PAR a 0.1 {unused} # attribute unused for unused parameters
PAR b 0.2 {inexpr} # attribute inexpr for parameters only used in expression
PAR c 0.3 {pop}    # attribute pop    for parameters only used in population-specific terms
PAR d 0.4 {every}  # attribute every  for parameters used in expressions, population and equations

PAR a 1 {type=int} # type integer. Warning this comment end at the comma: b is another parameter!, b 2.3 
.fi
.RE

Implicit initial condition. If \fIvar\fR is a dynamical variable, the declaration 

.RS
PAR var_0 0.5 
.RE

declares the parameter \fIvar_0\fR, sets it to 0.5 and implicitly declares the initial condition INIT \fIvar\fR 
\fIvar_0\fR.

.TP
.BR EXPR
Expressions. Expressions are function of the parameters. They cannot be modified. 
Syntax:

.RS
EXPR \fIname\fR \fIexpression\fR [ {\fIattributefR; ...} ] [ # \fIcomment\fR ] 
.RE

Expressions are particle-dependent. They are evaluated at the birth of a particle and are constant
for the lifetime of the particle. Use \fIATBIRTH\fR and \fIATREPLI\fR to specify particle-dependent expressions. 

Examples
.nf
E c a*a
E rand_array[i=0:5] -1 + 2*rand01[i]
E is_ancestor ATBIRTH*1 + ATREPLI*0
.fi

.TP
.BR AUX 
Auxiliary variables. Auxiliary variables depend on parameters, expressions and dynamical variables. 
Syntax:

.RS
AUX \fIname\fR \fIexpression\fR [ {\fIattributefR; ...} ] [ # \fIcomment\fR ] 
.RE

They are declared as Name Expression pairs, and must be scalars or one-dimensional arrays.
Auxiliary variables are useful to monitor quantities that depend on the dynamical variables. They can be 
plotted, and their values are recorded in the output file current.tab. 
Auxiliary functions are particle-dependent. They are evaluated at each time step.

.nf
A d sqrt(x+c)

A a[i=0:5] X[i]*X[i]
A norm_x sqrt(sum(a,5))
A norm_x2 dotprod(X,X,5)
.fi

.TP
.BR D/DT
Dynamical variables. Dynamical variables are the dependent variables of the ODE system.
Syntax:

.RS
d\fIname\fR/dt = \fIrhs\fR [ {\fIattributefR; ...} ] [ # \fIcomment\fR ] 
.RE

Dynamical variable \fIname\fR is declared as d\fIname\fR/dt followed by = and the \fIrhs\fR of the equation

.nf
dx/dt = -a*x
.fi

.TP
.BR INIT
Initial conditions. 
Syntax:

.RS
INIT \fIname\fR \fIexpression\fR [ {\fIattributefR; ...} ] [ # \fIcomment\fR ] 
.RE

Initial conditions can be numerical, or can be expression that depend on parameters or expressions.
For each equation D/DT, there must be an INIT with the corresponding \fIname\fR. 
If initial conditions are expressions, their values can be overruled or reset in odexp.

.nf
I x 1.0

I x b
.fi

.TP
.BR OPT
Options. Options can be preset. 

.nf
O x x1         # set x-axis to plot x1
O reltol 1e-3  # set ode solver reltol to 1e-3
.fi

.TP
.BR TIMES
Timespan. Time span is an array of the form t0 ti ... t1 where t0 and t1 are the initial and final times. 
Intermediate values ti are stopping time, where the system is reset to initial condition. This is useful when systems
are discontinuous, and variable need to be reset at known timepoints.

.nf
T 0 10
T 0 10 20 50 100
.fi

.TP
.BR ST
Static variable. Must be numerical. Static variables cannot be modified.

.nf
S MY_PI 3.14
.fi

.TP
.BR CONST
Constant array. Must be numerical array. Constant arrays cannot be modified.
Constant arrays can be of any dimensions. Useful for arrays of small sizes. 

.nf
C MY_ARRAY[2][3] { {1.1, 1.2, 1.3}, {2.1, 2.2, 2.3} }
.fi

.TP
.BR FI
Constant array from file.
Syntax:

.RS
INIT \fIname\fR \fInrows\fR \fIncols\fR \fIfilename\fR 
.RE

where \fInrows\fR \fIncols\fR are the number of rows and columns in the file \fIfilename\fR.
\fIfilename\fR is a text file containing a space delimited array of doubles.

.TP
.BR @
User-defined function.

.nf
@ my_fun_name (x, y, z) = x*x+y+z 
is interpreted as
/* double my_fun_name(double x,double y, double z) = { return x*x+y+z; }  */

@ mean(*x) = sum(x,LENTGH_X)/LENTGH_X 
is interpreted as
/* double mean(double *x) { return sum(x,LENTGH_X)/LENTGH_X } */

@ myatan( x, *p) = ({ \
  double scale = *(double*)p; \
  x *= scale; \
  atan(x); \
})
is interpreted as
double  myatan(double x, double *p)
{
    double scale = *(double*)p;
    x *= scale;
    return atan(x);
}
.fi

The function \fIsum\fR is a helper function (see below for a list of helper functions). 

.SH POPULATION-SPECIFIC DECLARATIONS (%)

.TP
.BR %BIRTH 
Particle (de novo) birth rate

.nf
%BIRTH 0.1 /* set birth rate to 0.1 per unit time */
%BIRTH 1.0/(10 + \fIPOP_SIZE\fR) /* set birth rate to a function of the total partice number \fIPOP_SIZE\fR */
.fi

.TP
.BR %DEATH 
Particle death rate

.nf
%DEATH 0.01 /* constant particle death rate */
%DEATH \fIvar_death_rate\fR /* set death rate to \fIvar_death_rate\fR */
.fi

.TP
.BR %REPLI
Particle replication rate

.TP
.BR %C
Coupling term. 
This is of the form PSI[i] = 1/POP_SIZE*sum_{j=1}^POP_SIZE \fIphi\fR(x[j],x[i]), where \fIphi\fR is a function of two variables. The declaration is

.nf
%C PSI
phi(THEM("x"),US("x"))

The coupling term PSI take a value for each particle.
.fi

.TP
.BR %M
Mean field. 
This is of the form MF = 1/POP_SIZE*sum(j=1) \fIphi\fR(x[j]), where \fIphi\fR depend only on one variable.

.nf
%M MF phi(US("x"))

The mean field term in an average over the population, and take a single value.
.fi

.SH MACROS

.TP
.BR DWDT
Gaussian, uncorrelated white noise ~ N(0,1), as the derivative of the Wiener process. 
The stochastic differential equation 

.nf
dx/dt = -theta(x - mu)*x + sigma*DWDT
.fi

would have as a solution x(t) the Ornstein-Uhlenbeck process, centered at mu, with sigma a diffusion constant and
theta a pull rate constant.

.TP
.BR POP_SIZE
Total number of particles. 

.TP
.BR OY("var") " " (OE,OA)
Used in %C to iterate over all particles; var is a dynamical variable (Y), expression (E) or auxiliary variable (A).

.TP
.BR MY("var") " " (ME,MA) 
Used in %C and %M to denote the current particle; var is a dynamical variable (Y), expression (E) or auxiliary variable (A).

.TP
.BR SY("var") " " (SE,SA)
Value of the current particle's sister var. Useful to specify what happens when particle replicates. var is a dynamical variable (Y), expression (E) or auxiliary variable (A).

.TP
.BR ATBIRTH 
logical variable indicating if the particle is just born.

.TP
.BR ATREPLI 
logical variable indicating if the particle is replicating.

.TP
.BR ISDAUGHTER 
logical variable indicating if the particle is the daughter. 
This is nonzero only at replication (ATREPLI = 1). 
The daughter particle is the newly formed particle. 
At replication, the daughter particle is created from the mother particle by copy. 
Then, the mother particle is updated and becomes the sister particle. 
The daughter is then updated, and can refer to the sister particle with SE and SY.

.TP
.BR ISMOTHER 
logical variable indicating if the particle is the mother. 
This is nonzero only at replication (ATREPLI = 1).

.TP
.BR ID 
Particle ID

.SH NUMERICAL AND GRAPHICAL OPTIONS

See the list of options with 'lo'.

.SH FUNCTIONS ACTING ON ARRAYS
.TP
.BR \fIdouble\fR " " sum\fR(\fIdouble " " \fI*array\fR, " " \fIlong " " \fIlen\fR)
Sum the elements of the array \fIarray\fR of length \fIlen\fR.
Return the sum of the array
.TP
.BR \fIdouble\fR " " sumstep\fR(\fIdouble " " \fI*array\fR, " " \fIlong " " \fIlen\fR, " " \fIlong " " \fIstep\fR)
Sum only the \fIstep\fR'th elements of the array \fIarray\fR of length \fIlen\fR.
.TP 
.BR \fIdouble\fR " " prod\fR(\fIdouble " " \fI*array\fR, " " \fIlong " " \fIlen\fR) 
Product of the elements of the array \fIarray\fR of length \fIlen\fR.
.TP
.BR \fIdouble\fR " " dotprod\fR(\fIdouble " " \fI*x\fR, " " \fIdouble " " \fI*y\fR, " " \fIlong  " " \fIlen\fR)
Scalar product of two arrays \fIx\fR and \fIy\fR of lengths \fIlen\fR. Returns the scalar product.
.TP
.BR \fIdouble\fR " " conv\fR(\fIdouble " " \fI*u\fR, " " \fIdouble " "  \fI*v\fR, " " \fIlong " " \fIlen\fR) 
convolution product between arrays \fIu\fR and \fIv\fR, each of length \fIlen\fR. Returns the convolution product.
.TP
.BR \fIdouble\fR " " minus\fR(\fIdouble " "  \fIx\fR, " "  \fIdouble " "  \fIy\fR)
Subtraction. 
Used with \fBsumxy\fR.
.TP
.BR \fIdouble\fR " " plus\fR(\fIdouble " "  \fIx\fR, " "  \fIdouble " "  \fIy\fR)
Addition.
Used with \fBsumxy\fR.
.TP
.BR \fIdouble\fR " " sumxy\fR(\fIlong " " \fIlen, " " \fIdouble " " \fI(*f)(double)\fR, " " \fIdouble " " \fI(*g)(double,double)\fR, " " \fIconst " "  \fIdouble " " \fI*x\fR, " " \fIconst " " \fIdouble " " \fIyi\fR)
Sum over j of \fIf\fR(\fIg\fR(\fIx_j\fR,\fIyi\fR)) 
.TP
.BR \fIdouble\fR " " linchaindelay\fR(\fIdouble " " \fIroot\fR, " " \fIdouble " " \fI*chain\fR, " " \fIsize_t " " \fIlink\fR, " " \fIdouble " " \fIdelay\fR, " " \fIsize_t " " \fIlen\fR)
\fIlink\fR'th element of a linear chain \fIbeta\fR*(\fIchain\fR[\fIlink\fR-1]-\fIchain\fR[\fIlink\fR]), (and \fIbeta\fR*(\fIroot\fR-\fIchain\fR[\fI0\fR]))

.SH TIME DELAYS
There is a shortcut to specify a delayed variable. 
If z is a dynamical variable, then

LAG ztau1 {root = z; mean = tau; len = 1000; init = 0.2}

defines the dynamical variable ztau1 as the delayed version of z with a linear chain of length 1000 and mean tau.
All intermediate variables, including ztau1, have initial condition 0.2.

.SH EVALUATING COUPLING TERMS IN O(N)
Coupling term (%C) are evaluated by default in O(N^2) where N is the population size. 
When the attribute \fIexpan\fR is present in a coupling declaration, an order P Chebychev expansion  
is used to approximate the coupling function g given in the attribute \fIfun\fR over the variable given
in attribute \fIvar\fR. 
The Chebychev approximation is then used to compute the first P+1 coupling moments A_k

.RS
Ak = sum_{j=1}^N (xj)^k

g(xj-xi) = sum_{k=0}^P A_k phi_k(xi)  
.RE

Each moment is computed in O(N). The functions phi_k are computed in O(P^2). 
The resulting coupling terms can be computed in O(N*P^3).
The expansion method is therefore useful when N > P^3. For practical purpose, with P ~ 10, the method
can be faster if N > 1000. 
The P is precalculated at each evaluation based on abstol. 
P increases with max{|xj-xi|}, so that the method works better when the particles are concentrated. 

The coupling function g must be of the form g(u, *p) = gg(s*u) where the pointer p points to the scalar value s. 

Chebychev expansion is currently limited to coupling functions of the form g(xj-xi) for xi, xj scalars.

Example

.fn
The following code calls the expansion method for the coupling term sin(xj-xi).
The auxiliary term TH is introduced to force the values of theta between 0 and 2 * PI. 

.RS
%C coupling 0.0 {expan; var = MA("TH"); fun = coupling_fun_sin}

AUX TH theta - ( (int) (theta/2/PI) * 2 * PI )

@ coupling_fun_sin(x, *p) = ({ \\
  double scale = *(double *)p; \\
  x *= scale; \\
  sin(x); \\
  })
.RE
.fi


.SH EXAMPLES
Here is an example of an odexp file

.nf
.RS
## file lotka.pop
## a simple nonlinear ODE system
#  all lines starting with ## are printed with the command ld

PAR a 0.2, b 0.3

dx/dt = x*(y - a)
dy/dt = y*(b - x)

I x 0.1, y 0.2

T 0 10
.RE
.fi

To print the file current.plot formatted, use
.nf
.RS
hexdump -e '"%f " "%f " "%f " "\\n"' current.plot
.RE
.fi
