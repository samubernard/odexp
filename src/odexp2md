#!/usr/bin/perl -w
#------------------------------------------------------------------------------
# File:         odexp2md
#
# Description:  convert a population dynamical system file to markdown
#
# Revisions:    05/2019 - Samuel Bernard
#------------------------------------------------------------------------------

use warnings;
use strict;
use feature 'unicode_strings';

my $version = '1.0';

use File::Copy;
use File::Basename qw( fileparse );
use File::Path qw( make_path );
use File::Spec;
use File::Temp qw/ tempfile tempdir /;
use Getopt::Std;

# ---------------------------------------
# regexp
# ---------------------------------------
# valid identifiers start with a letter (Latin or Greek), and followed by 'word'
# characters: alphanumeric characters, underscore _, or Greek letters.

my $knownfunction = qr/
 (a?sin|a?cos|a?tan|exp|log|pow|sqrt)
/x;

my $re_identifier = qr/[\p{L}Α-Ωα-ω][\wΑ-Ωα-ω]*/;
my $re_iter_scalar = qr/
  \s*                   # whitespaces
  \[(\w+)               # iterator
  \s*                   
  =?               
  \s*     
  (|\d+)                 # start
  \s*:?\s*
  (|\d+)                 # end
  \]
/x;

my $re_iter = qr/
  \s*                   # whitespaces
  \[(\w+)               # iterator - mandatory
  \s*                   
  =                     # mandatory
  \s*     
  (\w+)                 # start - mandatory
  \s*:?\s*              # : mandatory
  (\w+)                 # end - mandatory
  \]
/x;

my $re_pace = qr/^
  \s*(%|AUX|CONST|EXPR|INIT|OPT|PAR|MAC|TIMES|)\w*   # type
  \s+                   # whitespaces
  ($re_identifier)      # varname 
  (?:\s*\[.*?\])*       # any number of brackets do not capture
  \s+                   # whitespaces
  ([^\{#\n]+)           # rhs until bracket comment or newline 
  (|\{.*?\})?           # nothing or attribute
  \s*                   # whitespaces
  (|\#.*)?              # nothing or comment
$/ix;

my $re_nakedpar = qr/^
  \s*$re_identifier     # varname 
  \s+                   # whitespaces
  [-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? # one number
  \s+                   # whitespace(s)
  (|\{.*?\})?           # nothing or attribute
  \s*                   # whitespace(s)
  (|\#.*)?              # nothing or comment
$/ix;                   # end of line

my $re_implicitIC = qr/^
  \s*PAR\w*             # must be a parameter
  \s+                   # whitespaces
  ($re_identifier)_0         # with a varname ends with _0
  \s+                   # whitespaces
  [-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)? # one number
  \s+                   # whitespace(s)
  (|\{.*?\})?           # nothing or attribute
  \s*                   # whitespace(s)
  (|\#.*)?              # nothing or comment
$/ix;                   # end of line

my $re_nakedaux = qr/^
  \s*($re_identifier    # varname 
  (?:\s*\[.*?\]+)?)     # optional brackets
  \s*                   # whitespaces
  =                     # equal sign
  \s*                   # whitespace
  ([^\{#\n]+)           # rhs until bracket comment or newline 
  (|\{.*?\})?           # nothing or attribute
  \s*                   # whitespace(s)
  (|\#.*)?              # nothing or comment
$/ix;                   # end of line

my $re_attributeIC = qr/^
  \s*D                  # first derivative
  ($re_identifier       # var name
  (?:\s*\[.*?\])?)      # optional brackets
  \/DT                  # second part of derivative
  \s*=\s*               # equal
  [^\{#\n]+             # rhs until bracket comment or newline 
  \{.*?init\s*=\s*(.*?)(?:,.*?\}|\s*\}) # attribute containing init=ic;
  \s*                   # whitespace(s)
  (?:|\#.*)?            # nothing or comment
$/ix;

my $re_lag = qr/^
  \s*L(?:AG)?           # lag keyword
  \s+                   # whitespaces
  ($re_identifier)      # varname
  \s*                   # whitespaces
  \{(.*?)\}             # mandatory attribute
  \s+                   # whitespaces
  (?:|\#.*)?            # nothing or comment
$/ix;

my $re_dxdt = qr/^
  \s*(D)                # first derivative
  ($re_identifier)      # var name
  (?:\s*\[.*?\])?       # optional brackets do not capture
  \/DT                  # second part of derivative
  \s*=\s*               # equal
  ([^\{#\n]+)           # rhs until bracket comment or newline 
  (|\{.*?\})?           # nothing or attribute
  \s*                   # whitespace(s)
  (|\#.*)?              # nothing or comment
$/ix;

my $re_pop = qr/^
  \s*(%\w*)             # type
  \s+                   # whitespace(s)
  ([^\{#\n]+)           # rhs until bracket comment or newline 
  (|\{.*?\})?           # nothing or attribute
  \s*                   # whitespace(s)
  (|\#.*)?              # nothing or comment
$/ix;

my $re_lrexp = qr/^
\s*%C                 # expansion keyword
  \s+                   # whitespaces
  ($re_identifier)      # varname
  \s+                   # whitespaces
  ([^\{#\n]+)           # rhs until bracket comment or newline 
  \{(.*?)\}             # mandatory attribute
  \s+                   # whitespaces
  (?:|\#.*)?            # nothing or comment
$/ix;

my $re_scalar = qr/^
      (?:D|\w+\s)               # starts with D or else
      \s*                       # whitespaces
      $re_identifier(?:\s*\[\s*\d+\s*\])*  # varname followed by [0] optionally
      \s*                       # whitespaces
      (\/DT)?                   # followed by DT optionally
      \s*[^\[\S#\{]             # followed by something else that [, { or #
/ix;


my $mftext = qq(Mean fields are averages over all particles. 
They are of the form

\\begin{align*}
\\langle M_i \\rangle_i = \\frac{1}{N_p} \\sum_{i \\in \\{\\text{particle index}\\} } M_i,
\\end{align*}

where \$M_i\$ is an expression that depends on particle \$i\$, and \$N_p\$ = `POP_SIZE`, 
the number of particles.
);
my $ctext = qq(Couplings are averages over all pairs of particles. 
They are of the form

\\begin{align*}
\\langle C_{i,j} \\rangle_j = \\frac{1}{N_p} \\sum_{j \\in \\{\\text{particle index}\\} } C_{i,j},
\\end{align*}

where \$C_{i,j}\$ is an expression that depends on particles \$i\$ and \$j\$, and \$N_p\$ = `POP_SIZE`, 
the number of particles.
);

my @timespan;

# ---------------------------------------

# odexp optional parameters
our ($opt_p, $opt_o, $opt_i);
$opt_i = 0; # default: do check for syntax error 
getopts('o:p:i'); # -o optimization; -p parameterfilename; -i do not check for syntax errors
if ( !defined $opt_o )
{
    $opt_o = 'g';
}
my $odefilename;
# check the number of arguments, must be 1 or 2
my $nbr_argv = @ARGV;
if ( $nbr_argv == 0 ) {
  $odefilename = "stdinput";
} else {
  $odefilename = $ARGV[0];
}

# ---------------------------------------
# Files created in current directory
# .md:  formatted equation, constants, datafile ... 
# ---------------------------------------

my $bname = fileparse($odefilename, qr/\.[^.]*/);

my $mdfile = $bname . ".md";

open(my $fhmd, '>', $mdfile) or die "could not open file '$mdfile'. $!";

# prescan(); # check for common syntax errors; clean up ode 

# ====================================================================================
# Try to find author information 
# ====================================================================================
#find_authors($modelode);

# ====================================================================================
# Print Header 
# ====================================================================================
print_ode_header();
# ====================================================================================
# DEFINE LETS 
# ====================================================================================
print_scalar_or_array("LET","First assume that");
# ====================================================================================
# DEFINE PARAMETERS 
# ====================================================================================
print_parameters_and_constants();  
# ====================================================================================
# DEFINE EQUATIONS 
# ====================================================================================
print_equations("D\.*/DT", $re_dxdt, "### Equations", "rhs");
# ====================================================================================
# DEFINE PARAMETRIC EXPRESSION/AUXILIARY FUNCTIONS...
# ====================================================================================
print_scalar_or_array("INIT","");
print_scalar_or_array("EXPR","### Parametric expressions and auxiliary terms");
print_scalar_or_array("AUX","");
print_scalar_or_array("%M","### Mean fields");
print_scalar_or_array("%C","### Coupling functions");
# ====================================================================================
# PRINT LAGS
# ====================================================================================
print_lags();
# ====================================================================================
# DEFINE POPULATION RATES 
# ====================================================================================
print_pop_rates();
# ====================================================================================
# DECLARE AND DEFINE CONSTANT ARRAYS
# ====================================================================================
print_array_from_file();
print_constant_array();
# ====================================================================================
# DECLARE AND DEFINE FUNCTIONS
# ====================================================================================
print_functions();
# ====================================================================================
# PRINT OPTIONS 
# ====================================================================================
print_options("OPT","# Options");

close $fhmd;

exec ("pandoc --pdf-engine=xelatex -o ${bname}.pdf $mdfile") or print STDERR "could not convert to pdf $!";

sub print_ode_header
{
  open(my $fh, '<', $odefilename) or die "could not open file '$odefilename'. $!";
  print $fhmd "---\n";
  print $fhmd "title: \"`$bname`\"\n";
  print $fhmd "author: \n";
  while ( <$fh> )    
 	{
		/^#-AUTHOR/i or next;   # match character or go to next line of file
    s/^#-AUTHOR\s*//i; # strip comment symbols
    print $fhmd "- $_";
	}	
  print $fhmd "geometry:\n"; 
  print $fhmd "- top=35mm\n";
  print $fhmd "- left=30mm\n";
  print $fhmd "- right=4cm\n";
  print $fhmd "- heightrounded\n";
  print $fhmd "fontfamily: fourier\n";
  print $fhmd "abstract: |\n";
  seek $fh, 0, 0; # rewind file 
  while ( <$fh> )    
 	{
		/^##/i or next;   # match character or go to next line of file
    s/^##\s?//; # strip comment symbols
    print $fhmd "  $_"; 
	}	
  print $fhmd "\n";
  print $fhmd "---\n\n";

  seek $fh, 0, 0; # rewind file 
  while ( <$fh> )    
 	{
		/^TIMES/i or next;   # match character or go to next line of file
    @timespan = split; 
    shift(@timespan);
	}	

  close($fh);
}


sub print_array_from_file
{
  # expecting: F my_array_name nRow nCols filename.dat 
  open(my $fh, '<', $odefilename) or die "could not open file '$odefilename'. $!";
  while (<$fh>) 
  {
    if ( /^FI/i )  
    {
      my @fields = split; 
      if ( 0+@fields < 5 ) { die "missing something at line: $_" };
      my ($var, $nbr_rows, $nbr_cols, $data_filename) = @fields[1..4];
      print $fhmd "Data array ${var} from `$data_filename` of size $nbr_rows x $nbr_cols\n\n";
      print $fhmd "```\n";
      open(my $datafh, '<', $data_filename) or die "Could not open file '$data_filename'. $!";
      while( <$datafh> )
      {
          my @datafields = split;
          for( my $j = 0; $j<$nbr_cols-1; ++$j )
          {
            print $fhmd "$datafields[$j] ";
          }
          if ( $. < $nbr_rows ) 
          {
            printf $fhmd "$datafields[$#datafields]\n"; 
          } else
          {
            printf $fhmd "$datafields[$#datafields]\n\n";
          }
      }
      print $fhmd "```\n";
      close($datafh);
    }
  }
  close($fh);
}

sub print_constant_array
{
  # declare and initialize constant array
  open(my $fh, '<', $odefilename) or die "could not open file '$odefilename'. $!";
  my $varfound = 0;

  while ( <$fh> )    
  {
    /^CONST/i or next;
    $varfound = 1;
  }
  
  close($fh) if not $varfound;
  return if not $varfound;
   
  seek $fh, 0, 0; # rewind file 
  print $fhmd "### Constant arrays\n\n";
  while (<$fh>) 
  {
    if ( /^CONST/i )  
    {
      my @fields = split; 
      my $var = $fields[1];
      print $fhmd "$var = " . join(' ', @fields[2..$#fields]) . "\n\n";
    }
  }
  close($fh);
}

sub print_functions
{
  # declare and define user-defined functions
  open(my $fh, '<', $odefilename) or die "could not open file '$odefilename'. $!";
  my $varfound = 0;

  while ( <$fh> )    
  {
    /^(@|FUN)/i or next;  
    $varfound = 1;
  }
  
  close($fh) if not $varfound;
  return if not $varfound;
   
  seek $fh, 0, 0; # rewind file 
  print $fhmd "### User-defined `C` functions\n";
  print $fhmd "```{C}\n";
  my $infunc = 0;
  while (<$fh>) 
  {
    (/^(@|FUN)/i or $infunc) or next;  
    if ( $_ =~ /^(@|FUN)/i )
    {
      $_ =~ s/^(@|FUN)/double/i;
      if ( not ($_ =~ /=/) ) 
      {
        $infunc = 1;
        print $fhmd $_;
        print $fhmd "{\n";
      }
      else # one-liner
      {
        $_ =~ s/=/\n{\n  return /;
        $_ =~ s/$/;\n}\n/;
        print $fhmd $_;
      }
    }
    elsif ( $infunc ) 
    {
      if ( /^end/ ) 
      {
        $infunc = 0;
        print $fhmd "}\n\n";
      }
      else 
      {
        print $fhmd $_;
      }
    }
  }
  print $fhmd "```\n\n";
  close($fh);
   
}


# print_parameters_and_constants
# take a line of the form 
#   PAR mu VAL {attr} # comment
sub print_parameters_and_constants
{
  open(my $fh, '<', $odefilename) or die "could not open file '$odefilename'. $!";
  my $varfound = 0;

  while ( <$fh> )    
  {
    /^PAR/i or next;  
    $varfound = 1;
  }
  
  close($fh) if not $varfound;
  return if not $varfound;
   
  seek $fh, 0, 0; # rewind file 
  print $fhmd "### Model parameters and constants\n\n";

  while ( <$fh> )
  {
    /^(#-PAR|#-MAC)/i or next;
    s/^#-\w+\s*//; # strip comment symbols
    print $fhmd $_;
  }
  print $fhmd "\n";

  seek $fh, 0, 0; # rewind file 
  print $fhmd "Parameter                       Value       Comment\n";
  print $fhmd "----------                      --------    ----------\n";
	while ( <$fh> )    
	{
  	/^(PAR|MAC)/i or next;
    if ( my ($type, $varname, $rhs, $attr, $comment) = ( /$re_pace/ ) )
    {
      ($comment) = ( $comment =~ /\# ?(.*)/ ); 
      printf $fhmd ("%-32s%-12s", "`" . $varname . "`", $rhs);
      print $fhmd "$comment" if length $comment; 
      print $fhmd "constant" if /^MAC/i;
      print $fhmd "\n";
    }
	}
  print $fhmd "\n";
  close($fh);
}

# print_options
# take a line of the form 
#   PAR mu VAL {attr} # comment
sub print_options 
{
  open(my $fh, '<', $odefilename) or die "could not open file '$odefilename'. $!";
  my $varfound = 0;

  while ( <$fh> )    
  {
    /^OPT/i or next;  
    $varfound = 1;
  }
  
  close($fh) if not $varfound;
  return if not $varfound;

  seek $fh, 0, 0; # rewind file 
  print $fhmd "### Options\n\n";
  print $fhmd "```\n";
	while ( <$fh> )    
	{
  	/^OPT/i or next;
    if ( my ($type, $varname, $rhs, $attr, $comment) = ( /$re_pace/ ) )
    {
      ($comment) = ( $comment =~ /\# ?(.*)/ ); 
      printf $fhmd ("%-16s%s", $varname, $rhs);
      print $fhmd "$comment" if length $comment; 
      print $fhmd "\n";
    }
	}
  print $fhmd "```\n";
  print $fhmd "\n";
  close($fh);
}


# takes a line EXPR array[i=0:10][j=0:15]
# and declare
#   double array[10][15];
sub print_scalar_or_array
{
  open(my $fh, '<', $odefilename) or die "could not open file '$odefilename'. $!";

  my ($character,$descr) = @_;
  my $varfound = 0;
  my $carryover = 0;
  my $print_iter = 0;
  my @it;

  print $fhmd "Time span: `[@timespan]`\n\n" if ( $character =~ /INIT/i and @timespan );

  while ( <$fh> )    
  {
    /^$character/i or next;
    $varfound = 1;
  }
  
  close($fh) if not $varfound;
  return if not $varfound;

  print $fhmd "$descr\n";
  seek $fh, 0, 0; # rewind file 
  print $fhmd $mftext if ( $character =~ /%M/i );
  print $fhmd $ctext if ( $character =~ /%C/i );
  while ( <$fh> )    
  {
    /^#-$character/i or next;
    s/^#-$character\s*//; # strip comment symbols
    print $fhmd $_;
  }
  print $fhmd "\n";
  
  seek $fh, 0, 0; # rewind file 
  print $fhmd "```\n";
  while ( <$fh> )    
 	{
    if ( $_ =~ /^$character/i )
    {
      $carryover = 1 if ( $_ =~ /(\.\.\.\s*$|\\$)/ ); #  carry over to next line
      my ($type, $name, $rhs, $attr, $comment) = ( $_ =~ $re_pace );
      ($attr) = ($attr =~ /{\s*(.*)\s*}/) if length $attr;
      print $fhmd "# $name: $attr\n" if length $attr;
      ($comment) = ( $comment =~ /\# ?(.*)/ ) if length $comment; 
      print $fhmd "# $name: $comment\n" if length $comment;
      $name =~ s/$/{i}/ if ( $character =~ /%C/i and length $name ); 
      $name =~ s/$/($timespan[0])/ if ( $character =~ /INIT/i and length $name ); 
      print $fhmd "$name" if length $name;
      if ( @it = ($_ =~ m/$re_iter/g) )
      {
        $print_iter = 1;
        print $fhmd "[";
        while ( @it )
        {
          print $fhmd shift(@it);
          shift(@it); 
          shift(@it);
        }
        print $fhmd "]";
      }     
      else
      {
        $print_iter = 0;
      }
      $rhs =~ s/[MSO][YAEFU]\(($re_identifier)\)/$1/g if length $rhs;
      $rhs =~ s/MID/i/g if length $rhs;
      $rhs =~ s/OID/j/g if length $rhs;
      $rhs = strip_blanks($rhs);
      $rhs =~ s+(.*)+< $1 >+ if ( $character =~ /(%M|%C)/ and length $rhs );
      print $fhmd " = $rhs" . "\n";
    }
    elsif ( $carryover ) # print the carry over
    {
      s/[MSO][YAEFU]\(($re_identifier)\)/$1/g; 
      print $fhmd $_;  
      # print $_;
      $carryover = 0 if ( not ( $_ =~ /(\.\.\.\s*$|\\$)/ )); 
    }
    if ( $print_iter and not $carryover ) 
    {
      print $fhmd ", for ";
      while ( @it )
      {
        print $fhmd  shift(@it) . "=" . shift(@it) . ",...," . shift(@it) . ", "; 
      }
      print $fhmd "\n";
    }
    
	}	
  print $fhmd "```\n\n";
  close($fh);

}



sub print_equations 
{

  my ($pat_char,$pat_nameiter,$descr) = @_;
  print $fhmd "$descr\n";
  my $ii = 0;
  open(my $fh, '<', $odefilename) or die "could not open file '$odefilename'. $!";
  print $fhmd "```\n";
  while ( <$fh> )    
  {
    /^$pat_char/i or next;
    my ($type, $name, $rhs, $attr, $comment) = ( $_ =~ $pat_nameiter );
    my $rhs2print;
    $rhs2print = format_rhs($rhs);
    # print $rhs2print . "\n";
    print $fhmd "# $name: $attr\n" if length $attr;
    $comment =~ s/#\s*// if length $comment; # strip comment
    print $fhmd "# $name: $comment\n" if length $comment;
    print $fhmd "d$name/dt";
    print $fhmd " = " . $rhs2print . "\n"; 
  }
  print $fhmd "```\n\n";
  close($fh);

}

sub print_lags
{

  open(my $fh, '<', $odefilename) or die "could not open file '$odefilename'. $!";
  my $varfound = 0;

  while ( <$fh> )    
  {
    /^LAG/i or next;
    $varfound = 1;
  }
  
  close($fh) if not $varfound;
  return if not $varfound;
   
  seek $fh, 0, 0; # rewind file 
  print $fhmd "### Lags (delayed variables)\n\n";
  while ( <$fh> )    
  {
    /^LAG/i or next;
    my ($name, $attr, $comment) = ( $_ =~ $re_lag );
    my ($root) = ( $attr =~ /root\s*=\s*($re_identifier)/ );
    my ($mean) = ( $attr =~ /mean\s*=\s*(\w+)/ );
    my ($len) = ( $attr =~ /len\s*=\s*(\w+)/ );
    my ($init) = ( $attr =~ /init\s*=\s*(\w+)/ );
    $comment =~ s/#\s*// if length $comment; # strip comment
    print $fhmd "# $name: $comment\n" if length $comment;
    print $fhmd "\\begin{align*}\n";
    print $fhmd "\\mathit{$name} & = ";
    print $fhmd "\\int_0^\\infty \\mathit{$root}(t-s) \\beta^q s^{q-1} \\exp^{-\\beta s} ds,\n";
    print $fhmd "& \\text{where }\n";
    print $fhmd "\\beta = \\frac{\\mathtt{$len}}{\\mathtt{$mean}} \\text{ and } q = \\mathtt{$len}.\n";
    print $fhmd "\\end{align*}\n";
  }
  print $fhmd "\n";
  close($fh);

}

sub print_pop_rates
{
  open(my $fh, '<', $odefilename) or die "could not open file '$odefilename'. $!";
  my $varfound = 0;

  while ( <$fh> )    
  {
    /^(%BIRTH|%DEATH|%REPLI)/i or next;
    $varfound = 1;
  }
  
  close($fh) if not $varfound;
  return if not $varfound;
   
  seek $fh, 0, 0; # rewind file 
  print $fhmd "### Population rates\n\n";
  print $fhmd "Type            Value   \n";
  print $fhmd "----------      --------\n";
  while ( <$fh> )    
  {
    /^(%BIRTH|%DEATH|%REPLI)/i or next;
    if ( my ($type, $rhs, $attr, $comment) = ( /$re_pop/ ) )
    {
      $type =~ s/^%//; # strip the % 
      $rhs =~ s/[MSO][YAEFU]\(($re_identifier)\)/$1/g;
      printf $fhmd ("%-16s%s\n", "`" . $type . "`", "`" . $rhs . "`"); 
      printf $fhmd ("%-16s%s\n", "", $attr ) if length $attr;
      $comment =~ s/#\s*// if length $comment; # strip comment
      printf $fhmd ("%-16s%s\n", "", $comment ) if length $comment;
    }
  }
  print $fhmd "\n";
  close($fh);
}

# try to parse author information
# Author: J K Roller, George R R Martinet
#
# or
# 
# (not implemented)
# Author: JK Roller
#         GRR Martinet
sub find_authors
{
  my $re_author_keyword = qr/
  (?: Author|AUTHOR|author)s?      # word author(s)
  \s*:?\s+                         # followed by perhaps : 
  (.*)                             # followed by anything
  /x;
  my $re_fullname = qr/
  \G(\p{Lu}\p{Ll}+\b)[,.;]?\s* 
  /x;
  my $re_email = qr/
  \G([\w.]+@\w+\.[\w.]+\b)[;,]\s*   
  /x;
  my @authors;
  my @emails;
  while ( <> )    
  {
    my $author_line;
    if ( ( $author_line ) =  /$re_author_keyword/ )
    {
      while ( ( $author_line =~ m/$re_fullname/g ) ) 
      {
        push @authors, $1;
      }
      while ( ( $author_line =~ m/$re_email/g ) ) 
      {
        push @emails, $1;
      }
    }
  }
 
  print $fhmd "/* Authors: " . join(' ', @authors) .  " */\n"; 
  print $fhmd "/* Emails: " . join(' ', @emails) .  " */\n"; 

}

sub format_rhs
{
  my ($rhs) = @_;
  $rhs = strip_blanks($rhs);

  # match balanced parentheses
  my $re_balparent = qr/
    (                   # start of capture group 1
    \(                  # match an opening angle bracket
        (?:
            [^()]++     # one or more non angle brackets, non backtracking
              |
            (?1)        # found < or >, so recurse to capture group 1
        )*
    \)                  # match a closing angle bracket
    )                   # end of capture group 1
  /x;
  # $rhs =~ s/pow$re_balparent/{$1}/g;
  $rhs =~ s/(.{60}\S*)/$1\n         /g;
  # print $rhs;
  return $rhs;
}

sub strip_blanks
{
  my ($str) = @_; 
  $str =~ s/^\s*// if length $str;
  $str =~ s/\s*$// if length $str;
  return $str;
}

